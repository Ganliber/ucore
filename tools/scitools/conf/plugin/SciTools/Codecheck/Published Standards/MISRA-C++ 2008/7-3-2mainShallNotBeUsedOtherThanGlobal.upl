#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson 

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Main incorrectly used in %1.';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "7-3-2 The identifier main shall not be used for a function other than the global function main";}

# This is the full description of the rule being tested
sub description { return "7-3-2 (Required) The identifier main shall not be used for a function other than the global function main.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
<i>main</i> (or its equivalent) is usually the entry point to the program and is the only identifier which
must be in the global namespace. The use of <i>main</i> for other functions may not meet developer
expectations.</p>

<br>
<b>Example</b><pre style="margin-top:0;padding-top:0;">
  int32_t main ( ) // Compliant
  {
  }
  namespace
  {
    int32_t main ( ) // Non-compliant
    {
    }
  }
  namespace NS
  {
    int32_t main ( ) // Non-compliant
    {
    }
  }
  </pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");
  
  # Pull a list of all items that are declared or defined within this file
  my @allDefined = $file->filerefs("Define", "", 0);
  return unless @allDefined;

  # loop through all defined and declared items 
  REF: foreach my $def ( @allDefined ) {
    next unless $def->ent->name eq 'main';
    next if $def->ent->parent->name =~ /\.[c|C].?.?$/;

    # If we get to this point we must have a violation
    throwError($check, $def->ent, $file, $def->line, $def->column, ERR1, $def->scope->name);
  }
}