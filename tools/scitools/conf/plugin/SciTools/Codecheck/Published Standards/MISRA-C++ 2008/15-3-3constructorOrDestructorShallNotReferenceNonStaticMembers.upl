#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Function-try-block in Constructor or destructor referencing non static members from class or base in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "15-3-3 Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases";}

# This is the full description of the rule being tested
sub description { return "15-3-3 (Required) Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
The effect of accessing a non-static member of a class or a base class in the handler (i.e. the <i>catch</i>
part) of a <i>function-try-block</i> of a class constructor/destructor is undefined.</p>
<br>
<p>
For example, if a memory allocation exception is thrown during creation of the object, the object
will not exist when the handler attempts to access its members. Conversely, in the destructor, the
object may have been successfully destroyed before the exception is handled, so again will not be
available to the handler.</p>
<br>
<p>
By contrast, the lifetime of a static member is greater than that of the object itself, so the static
member is guaranteed to exist when the handler accesses it.</p>
<br>
<b>Example</b><pre style="margin-top:0;padding-top:0;">
For the majority of programs this will mean main should look like:
  class C
  {
  public:
    int32_t x;
    C ( )
      try
      {
        // Action that may raise an exception
      }
      catch ( ... )
      {
        if ( 0 == x ) // Non-compliant – x may not exist at this point
        {
          // Action dependent on value of x
        }
      }
    ~C ( )
      try
      {
        // Action that may raise an exception
      }
      catch ( ... )
      {
        if ( 0 == x ) // Non-compliant – x may not exist at this point
        {
          // Action dependent on value of x
        }
      }
  };
</pre>
<p><b>See also</b><br>
Rule 15–3–1, Rule 15–5–1</p>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");
  
  # Create a list of all classes that are defined
  my @functionsDefined = $file->filerefs("define", "public member function");
  return unless @functionsDefined;
  
  # Loop through each class looking for the try command
  foreach my $constructor(@functionsDefined) {
    # Check to see if the keyword catch exists in the text
	next unless $constructor->ent->contents =~ /catch/;
  
    my $flag = 1;
    # Check for a constructor.
	$flag = 0 if $constructor->ent->longname eq $constructor->ent->name . "::" . $constructor->ent->name;
	
	# check for a destructor
	my $string = reverse($constructor->ent->name);
	chop($string);
	$string = reverse($string);
	$flag = 0 if $constructor->ent->longname eq $string . "::~" . $string;
	
	next if $flag == 1;
	
	# We have found a constructor with a catch block; Initialize and check the lexer
	my $lexer = $file->lexer(1,0,0);
    return unless $lexer;
	
	# Set the first lexeme and counters need to check entire function
	my $counter = 1;
	my $first = 0;
	my $block = 0;
    my $lexeme = $lexer->lexeme($constructor->line, $constructor->column);
	
	#While we are still inside the current block
	while ($lexeme->line_begin <= $constructor->ent->ref("end")->line){
	  $block = 1 if $lexeme->text eq "catch";
	  next unless $block == 1;
	  $counter++ if $first == 1 and $lexeme->text eq "{";
	  $counter-- if $first == 1 and $lexeme->text eq "}";
	  $first = 1 if $first == 0 and $lexeme->text eq "{";
	  next unless $lexeme->ent && $lexeme->ent->kind->longname;
	  if ($lexeme->ent->kind->longname =~ /Member/ && !($lexeme->ent->kind->longname =~ /Static/) ) {
	    throwError($check, $constructor->ent,$file,$lexeme->line_begin,$lexeme->column_begin,ERR1,$constructor->file->name);
	  }
	  if ($counter == 0) {
	    $block = 0;
		$counter = 1;
	  }
	}
	continue {
      $lexeme = $lexeme->next;
    }
  }
}

sub checkLexeme {
  my $lexeme ->shift;
}




















