#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'A # or ## operator used in a macro in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "16-3-2 The # and ## operators should not be used";}

# This is the full description of the rule being tested
sub description { return "16-3-2 (Advisory) The # and ## operators should not be used.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b>
The order of evaluation associated with both the # and ## preprocessor operators is unspecified.
Compilers have been known to implement these operators inconsistently, therefore, to avoid these
problems, do not use them.</p>

<b>Example</b><pre style="margin-top:0;padding-top:0;">
#define A(Y) #Y // Non-compliant
#define A(X,Y) X##Y // Non-compliant
</pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file ~unknown ~unresolved");
  
  # Loop through all macros and see if the # or ## operator are being used.
  foreach my $macro($file->filerefs("define","macro",1)){
    if($macro->ent->value =~ /[^#]+#[^#]+/ || $macro->ent->value =~ /[^#]+##[^#]+/ || $macro->ent->value =~ /#[^#]+/ ||
	   $macro->ent->value =~ /[^#]+#/){
 	  $check->violation($macro->ent,$file,$macro->line,$macro->column,ERR1,$file->name);
 	}
  }
}
