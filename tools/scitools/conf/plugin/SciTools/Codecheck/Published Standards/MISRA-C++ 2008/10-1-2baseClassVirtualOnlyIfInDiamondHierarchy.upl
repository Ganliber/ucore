#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Class %1 derived from virtual baseeclared virtual without being in a diamond hierarchy';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "10-1-2 A base class shall only be declared virtual if it is used in a diamond hierarchy";}

# This is the full description of the rule being tested
sub description { return "10-1-2 ( Required ) A base class shall only be declared virtual if it is used in a diamond hierarchy.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Rationale</b><br>
The use of virtual base classes can introduce a number of undefined and potentially confusing
behaviours. Therefore, a base class shall only be declared virtual if that base class is to be used as
a common base class in a diamond hierarchy.</p>
<br>

<b>Example</b><pre style="margin-top:0;padding-top:0;">

  class A {};
  class B1: public virtual A {}; // Compliant – A is a common base for C
  class B2: public virtual A {}; // Compliant – A is a common base for C
  class C: public B1, B2 {};
  class D: public virtual A {}; // Non-compliant

</pre>

<br>

END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation( $ent, $file, $line, $column, $error, $name );
}

# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check( "c file");
  
  # Pull a list of all classes that have virtual bases
  my @classesDefined = $file->filerefs( 'Virtual Base' );
  return unless @classesDefined;

  # Loop through all classes with virtual bases
  foreach my $class ( @classesDefined ) {

    # Check if this class is a base class for another class, throw error if so
    my $sibling = $class->scope->ref( 'Derive' );
    throwError($check, $class->scope, $file, $class->line, $class->column, ERR1, $class->scope->name) unless $sibling;
    next unless $sibling;
    
    # Count the number of parents the child has, throw error if not at least 2
    my @parents = $sibling->ent->refs( 'Base' );
    throwError($check, $class->scope, $file, $class->line, $class->column, ERR1, $class->scope->name) if 0+@parents < 2;

  }

  
}