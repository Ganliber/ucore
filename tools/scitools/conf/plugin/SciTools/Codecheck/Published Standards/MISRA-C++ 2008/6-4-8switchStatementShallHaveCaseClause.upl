#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Switch statement without a case clause in %1.';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "6-4-8 Every switch statement shall have at least one case clause";}

# This is the full description of the rule being tested
sub description { return "6-4-8 (Required) Every switch statement shall have at least one case clause.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
A <i>switch</i> statement with no <i>case-clauses</i> is redundant.</p>
<br>
<b>Example</b><pre style="margin-top:0;padding-top:0;">
  switch ( x )
  {
                 // Non-compliant
    default:
      break;
  }
</pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# Subroutine designed to scan switch statements
sub checkAswitch {
  # Pull all needed data from the calling function
  my $check = shift;
  my $file = shift;
  my $ref = shift;
  my $lexeme = shift;
  
  # Push lexeme forward until we are inside the switch statement
  while ( $lexeme->text ne "{" ) {
    $lexeme = $lexeme->nextUseful
  }
  
  # Initialize all numbers and data need to track progress through switch and error location
  my $count = 1;
  my $start = $lexeme->line_begin;
  my $startColumn = $lexeme->column_begin;
  $lexeme = $lexeme->nextUseful;
  
  # While we are within our switch body
  while ( $lexeme && $count > 0 ) {
  
    # If we see switch, go recursive
    if ( $lexeme->text eq "switch" ) {
	  $lexeme = checkAswitch($check, $file, $ref, $lexeme);
	  
	# Inc counter, we are within another block
	} elsif ( $lexeme->text eq "{" ) {
	  $count++;
	  
	# Dec counter, we just left a block
	} elsif ( $lexeme->text eq "}" ) {
	  $count--;
	  throwError($check, $ref->ent,$file,$start,$startColumn,ERR1,$ref->ent->name);
	  return $lexeme if $count == 0;
	}
	
	# If we encounter a "case", this switch is ok, return to calling function
	return $lexeme if ( $lexeme->text eq "case" );
  }
  
  # Standard continuation statement
  continue {
    $lexeme = $lexeme->nextUseful;
  }
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");
  
  # Pull a list of all functions that are defined within this file
  my @functionsDefined = $file->filerefs("Define", "Function");
  return unless @functionsDefined;
  
  # loop through all defined functions
  foreach my $function(@functionsDefined) {
  
    # Next unless we have a switch statement
    my $text = $function->ent->contents;
	# Remove any // style comments
	$text =~ s/\/\/.*\n/\n/g;
	# Remove any /* */ style comments
	$text =~ s/\/\*.*\*\//\n/gs;
    # Next unless we have a switch statement
    next unless $text =~ /\s+switch(\s+|\()/;
	
	# Get end point
    my $end = $function->ent->ref("End");
	
    # Spin up a lexer
    my $lexeme = $function->lexeme;
	
	#While I am still within the function
	while ( $lexeme && $lexeme->line_begin < $end->line ) {
	  $lexeme = checkAswitch($check, $file, $function, $lexeme) if $lexeme->text eq "switch";
	}
	
	# Standard continue statement 
	continue {
      $lexeme = $lexeme->nextUseful;
    }
  }
}














