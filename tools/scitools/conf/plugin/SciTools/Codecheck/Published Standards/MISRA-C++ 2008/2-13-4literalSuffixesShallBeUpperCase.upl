# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 10-27-14


# Boiler Plate code
use base ( 'Understand::Codecheck' );
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Lowercase character used in literal suffix %1';


# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}


# This is the short error the Understand will use
sub name { 
  return "2-13-4 Literal suffixes shall be upper case";
}


# This is the full description of the rule being tested
sub description { 
  return "2-13-4 (Required) Literal suffixes shall be upper case.";
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { 
  return <<"END_DESC"

<p><b>Rationale</b><br>
Using upper case literal suffixes removes the potential ambiguity between â€œ1â€? (digit 1) and â€œlâ€?
(letter el) for declaring literals.</p>
<br>

<b>Example</b><pre style="margin-top:0;padding-top:0;">
  const unsigned int a = 0U; 
  const unsigned int b = 0u; // Non-compliant
  const long int c = 0L;
  const long int d = 0l; // Non-compliant
  const unsigned long int e = 0UL;
  const unsigned long int f = 0Ul; // Non-compliant
  const unsigned int g = 0x12bU;
  const unsigned int h = 0x12bu; // Non-compliant
  const float m = 1.2F;
  const float n = 2.4f; // Non-compliant
  const double o = 1.2L;
  const double p = 2.4l; // Non-compliant
  const double q = o;
  const double r = p;
</pre>

<p><b>See also</b><br>
ISO/IEC 14882:2003 [1] Â§2.13</p>
<br>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is per file
sub test_entity {
  return 1;
}


# This determines if this script is per project or per file
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options{
}


# This is the actual test being performed on the user's code
sub check {

  # Pull the check and file from calling function, return unless file
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check( "c file");
  
  # Pull all lexemes for this file
  my $lexer = $file->lexer( 0 );
  my @lexemes = $lexer->lexemes if $lexer;
  
  # Loop through all lexemes
  foreach my $lexeme ( @lexemes ) {

    # Next unless we are looking at a literal that is not a string
    next unless $lexeme->token eq 'Literal';
    next if $lexeme->text =~ /\'\"/;

    # Create test phrase through regex
    my $suffix = $lexeme->text;
    $suffix =~ s/(^0[0-8]+)|(^0x[0-9a-fA-F]+)|(^[1-9][0-9]*\.[0-9]+)|(^[1-9][0-9]*)//;

    # Test test phrase
    $check->violation( 0, $file, $lexeme->line_begin, $lexeme->column_begin, ERR1, $lexeme->text ) if $suffix =~ /l/;
    $check->violation( 0, $file, $lexeme->line_begin, $lexeme->column_begin, ERR1, $lexeme->text ) if $suffix =~ /f/;
    $check->violation( 0, $file, $lexeme->line_begin, $lexeme->column_begin, ERR1, $lexeme->text ) if $suffix =~ /u/;

  }
}


















