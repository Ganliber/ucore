#This script is designed to run with Understand - CodeCheck
#Rule 0-1-10 Every defined function shall be called at least once.
use base qw(Understand::Codecheck);
use strict;


use constant ERR1 => 'Violation: %1 defined but not called.';
use constant IGNORE1 => 'Ignore Virtual Functions (They can cause false positives since static analysis tools cannot track dynamic polymorphism)';

sub register_tr_text {
	my $check = shift;
	$check->add_tr_text(ERR1);
  $check->add_tr_text(IGNORE1);
}

sub name { '0-1-10 All defined functions called' }

sub description { '0-1-10 (Required) Every defined function shall be called at least once.' }

sub detailed_description { <<'END_DESC'
<p><b>Rationale</b><br>
Functions or procedures that are not called may be symptomatic of a serious problem, such as missing paths.</p>
<p><b>Exception</b><br>
Note that unused prototypes and main are not violations of this rule. </p>
END_DESC
}

sub test_language {
	my $language = shift;
	return $language eq 'C++';
}

sub test_entity { 1 }

sub test_global { 0 }

sub define_options {
  my $check = shift;  
  $check->option->checkbox('ignoreVirtual',IGNORE1,1);
  }

sub check {
	my $check = shift;
	my $file = shift;
	return unless $file->kind->check('c file');
	
	my @refsDefined = $file->filerefs('define', 'function', 1);
	foreach my $defRef(@refsDefined){
    return 1 if $defRef->ent->kind->check("virtual") && $check->option->lookup('ignoreVirtual');
    $check->violation($defRef->ent, $file, $defRef->line, $defRef->column, ERR1, $defRef->ent->name) unless isUsed($defRef->ent);
  }
	return;
}

sub isUsed{
  my $ent = shift;
  return 1 if $ent->name =~ /^~/; #skip destructors
  return 1 if $ent->ref('useby ptr'); #skip function pointers
  return 1 if $ent->ref('callby'); #find anywhere that $ent is calledby something else
  return 1 if $ent->name eq 'main';
  if($ent->kind->check("virtual")){
    my @subRefs = $ent->refs("overriddenby");
    foreach my $sub (@subRefs){
      return 1 if isUsed($sub->ent);
    }
  }
  return 0;
}