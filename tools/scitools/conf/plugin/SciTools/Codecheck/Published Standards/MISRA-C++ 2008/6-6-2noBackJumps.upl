#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Goto statement used as a back jump';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "6-6-2 The goto statement shall jump to a label declared later in the same function body";}

# This is the full description of the rule being tested
sub description { return "6-6-2 (Required) The goto statement shall jump to a label declared later in the same function body.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
Unconstrained use of <i>goto</i> can lead to programs that are extremely difficult to comprehend, analyse
and, for C++, can also lead to the program exhibiting <i>unspecified behaviour</i>.</p>
<p>
However, in many cases a total ban on <i>goto</i> requires the introduction of flags to ensure correct
control flow, and it is possible that these flags may themselves be less transparent than the <i>goto</i>
they replace.</p>
<p>
Therefore, the restricted use of <i>goto</i> is allowed where that use will not lead to semantics contrary
to developer expectations. â€œBackâ€? jumps are prohibited as they can be used to create iterations
without using the well-defined iteration statements supplied by the core language.</p>
<br>
<b>Example</b><pre style="margin-top:0;padding-top:0;">

  void f ( )
  {
    int32_t j = 0;
  L1:
    ++j;
    if ( 10 == j )
    {
      goto L2; // Compliant
    }
    goto L1; // Non-compliant
  L2:
    ++j;
  }

</pre>


END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");
  
  # Pull a list of all functions that are defined within this file
  my @functionsDefined = $file->filerefs("Define", "Function");
  return unless @functionsDefined;
  
  # loop through all defined functions
  foreach my $function (@functionsDefined) {
    
    # Pull text of function
    my $text = $function->ent->contents;
    # Remove any // style comments
    $text =~ s/\/\/.*\n/\n/g;
    # Remove any /* */ style comments
    $text =~ s/\/\*.*\*\//\n/gs;
    # check if a goto statement exists
    next unless $text =~/\s+goto\s+/;

    #initialize list for label tracking
    my @gotoSeen;

    # Spin up lexer to find goto statement
    my $lexeme = $function->lexeme();

    # Check entire function
    my $end = $function->ent->ref('end')->line;
    while ( $lexeme->line_begin < $end ) {

      if ( $lexeme->token eq 'Identifier' and $lexeme->ent and $lexeme->ent->kindname eq 'Label' ) {

        if ( lc ( $lexeme->prevUseful->text ) eq 'goto' ) {

          push ( @gotoSeen, $lexeme->text );

        } else {

          my $flag = 0;
          foreach my $goto ( @gotoSeen ) {

            $flag = 1 if $goto eq $lexeme->text;

          }

          throwError($check, $lexeme->ent, $file, $lexeme->line_begin, $lexeme->column_begin, ERR1, $lexeme->text ) if $flag == 0;

        }

        $lexeme = $lexeme->nextUseful;

      } else {

        $lexeme = $lexeme->nextUseful;

      }

    }
  }
}