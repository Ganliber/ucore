#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Digraph used in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "2-5-1 Digraphs should not be used";}

# This is the full description of the rule being tested
sub description { return "2-5-1 (Advisory) Digraphs should not be used..";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
The <i>digraphs</i> are:
<pre>
	<% %> <: :> %: %:%:
</pre>
The use of <i>digraphs</i> may not meet developer expectations.</p>
<br>
<b>Example</b><pre style="margin-top:0;padding-top:0;">
  template < typename T>
  class A
  {
  public:
    template < int i >
    void f2 ( );
  };
  void f ( A<int> * a<:10:> ) // Non-compliant
  <% a<:0:>->f2<20> ( ); %> // Non-compliant
  // The above is equivalent to:
  void g ( A<int> * a[ 10 ] )
  {
    a[ 0 ]->f2<20> ( ); // Compliant
  }
  </pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");
  
  # Create a list of all functions that are defined 
  my @functionsDefined = $file->filerefs("Define");
  return unless @functionsDefined;
  
  # Loop through each object
  foreach my $function(@functionsDefined) {
    # Next unless this function has digraphs
    my $text = $function->ent->contents;
	next unless $text =~ /<%|%>|<:|:>|%:|%:%:/;
	# Remove any // style comments
	$text =~ s/\/\/.*\n/\n/g;
	# Remove any /* */ style comments
	$text =~ s/\/\*.*\*\//\n/gs;
	# check if a digraph exists
	next unless $text =~ /<%|%>|<:|:>|%:|%:%:/;
	
	# We have a digraph not in a comment, spin up a lexer
	my $lexer = $file->lexer(1,0,0);
    return unless $lexer;
	my $lexeme = $lexer->lexeme($function->line, $function->column);
	my $currentString = "";
	
	#While we are still inside the current function
	while ($lexeme && $lexeme->line_begin <= $function->ent->ref("end")->line){
	  # If we are looking at an operator, append to our string
	  $currentString .= $lexeme->text if $lexeme->token eq "Operator";
	  # If we are looking at white space, check our string to see if it is a digraph
	  if ( $lexeme->token eq "Whitespace" ) {
	    throwError($check, $function->ent,$file,$function->line,$function->column,ERR1,$file->name) if $currentString =~ /<%|%>|<:|:>|%:|%:%:/;
		$currentString = "";
	  }
	}
	# Standard continuation statement.
	continue {
      $lexeme = $lexeme->next;
    }
  }
}


















