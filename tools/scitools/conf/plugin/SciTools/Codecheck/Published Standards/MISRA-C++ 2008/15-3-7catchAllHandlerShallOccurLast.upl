#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Catch-all handler not last in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "15-3-7 Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last";}

# This is the full description of the rule being tested
sub description { return "15-3-7 (Required) Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
If the catch-all handler is found before any other handler, that behaviour will be performed. Any
handlers after the catch-all are <i>unreachable code</i> and can never be executed.</p>
<br>
<b>Example</b><pre style="margin-top:0;padding-top:0;">
  void f1 ( )
  {
    try
    {
      // ...
    }
    catch ( int32_t i ) // int handler
    {
      // Handle int exceptions
    }
    catch( ... ) // catch-all handler
    {
      // Handle all other exception types
    }
  }
  void f2 ( )
  {
    try
    {
      // ...
    }
    catch( ... ) // catch-all handler
    {
      // Handle all exception types
    }
    catch ( int32_t i ) // Non-compliant â€“ handler will never be called
    {
    }
  }
</pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");
  
  # Create a list of all functions that are defined and have a catch handler
  my @functionsDefined = $file->filerefs("define catch exception end", "function", 1);
  return unless @functionsDefined;
  
  # Loop through each function with catch handlers
  foreach my $function(@functionsDefined) {
    # Pull the contents of the function with catch handlers
	my $text = $function->ent->contents;
	# Remove any // style comments
	$text =~ s/\/\/.*\n/\n/g;
	# Remove any /* */ style comments
	$text =~ s/\/\*.*\*\//\n/gs;
	# Test to see if a catch keyword is used after a catch( ... ) reference
	if ( $text =~ /.*catch\s*\(\s*\.\.\.\s*\).*catch.*/s ) {
	  throwError($check, $function->ent,$file,$function->line,$function->column,ERR1,$file->name);
	}
  }
}



















