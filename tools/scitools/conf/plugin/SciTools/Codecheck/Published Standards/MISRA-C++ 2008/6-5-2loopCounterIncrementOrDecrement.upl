#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Inappropriate condition test in for loop';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=";}

# This is the full description of the rule being tested
sub description { return "6-5-2 (Required) If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
When the <i>loop-counter</i> is modified using an operator other than -- or ++, then == and != shall not be
used, as loop termination may not occur, which may be inconsistent with developer expectations.</p>
<br>
<b>Example</b><pre style="margin-top:0;padding-top:0;">
  for ( i = 1; i != 10; i += 2 ) // Non-compliant
  for ( i = 1; i &lt;= 10; i += 2 ) // Compliant
  for ( i = 1; i != 10; ++i ) // Compliant
</pre>


END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");
  
  # Pull a list of all functions that are defined within this file
  my @functionsDefined = $file->filerefs("Define", "Function");
  return unless @functionsDefined;
  
  # loop through all defined functions
  foreach my $function(@functionsDefined) {
    
    # Pull text of function
    my $text = $function->ent->contents;
    # Remove any // style comments
    $text =~ s/\/\/.*\n/\n/g;
    # Remove any /* */ style comments
    $text =~ s/\/\*.*\*\//\n/gs;
    # check if a for loop exists
    next unless $text =~/for\s*\(/;

    # Spin up lexer and find for loop
    my $lexeme = $function->lexeme();

    # Check entire function
    my $end = $function->ent->ref('end')->line;
    while ( $lexeme->line_begin < $end ) {

      #$check->violation($function->ent, $file, $lexeme->line_begin, $lexeme->column_begin, $lexeme->text );

      if ( $lexeme->token eq 'Keyword' and $lexeme->text eq 'for') {

        # Move into for loop structure
        $lexeme = $lexeme->nextUseful();
        $lexeme = $lexeme->nextUseful();  

        # Check the first parameter to the for loop
        my @init;
        while ( $lexeme->text ne ';' ) {
          push ( @init, $lexeme->text ) if $lexeme->token eq 'Identifier' and $lexeme->nextUseful->text eq '=';
          $lexeme = $lexeme->nextUseful;
        }    

        # Check the second parameter to the for loop
        $lexeme = $lexeme->nextUseful;
        my $condition = '';
        while ( $lexeme->text ne ';' ) {
          $condition .= $lexeme->text;
          $lexeme = $lexeme->nextUseful;
        }    

        # Check the third parameter to the for loop
        my $increment = '';
        while ( $lexeme->text ne ')' ) {
          $increment .= $lexeme->text;
          $lexeme = $lexeme->nextUseful;
        }

        # Check each identifier within init for proper usage
        foreach my $term( @init ) {

          next if $increment =~ /$term\s*\+\+/;
          next if $increment =~ /\+\+\s*$term/;
          next if $increment =~ /$term\s*\-\-/;
          next if $increment =~ /\-\-\s*$term/; 
          next if $condition !~ /$term/;
          next if $condition =~ /$term\s*\<\=/;
          next if $condition =~ /$term\s*\>\=/;
          next if $condition =~ /$term\s*\</;
          next if $condition =~ /$term\s*\>/;
          next if $condition =~ /\<\=\s*$term/;
          next if $condition =~ /\>\=\s*$term/;
          next if $condition =~ /\<\s*$term/;
          next if $condition =~ /\>\s*$term/;

          throwError($check, $function->ent,$file,$lexeme->line_begin,$lexeme->column_begin,ERR1)

        }

      } else {
        $lexeme = $lexeme->nextUseful;
      }

    }
  }
}














