#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Function with exception-specification declared with a different set of type-ids in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "15-4-1 If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids";}

# This is the full description of the rule being tested
sub description { return "15-4-1 (Required) If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
It is <i>undefined behaviour</i> if a function has different <i>exception-specifications</i> in different translation
units.</p>
<br>
<b>Example</b><pre style="margin-top:0;padding-top:0;">
  // Translation unit A
  void foo( ) throw ( const char_t * )
  {
    throw "Hello World!";
  }
  // Translation unit B
  // foo declared in this translation unit with a different exception
  // specification
  extern void foo ( ) throw ( int32_t ); // Non-compliant -
  // different specifier
  void b ( ) throw ( int32_t )
  {
    foo ( ); // The behaviour here is undefined.
  }
</pre>
<BR>
<b>6.15.5 Special functions</b>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");
  
  # Create a list of all functions that are defined
  my @functionsDefined = $file->filerefs("define", "function");
  return unless @functionsDefined;
  
  # Loop through each function 
  foreach my $function(@functionsDefined) {
    # Next unless this function allow exceptions
    next unless $function->ent->freetext("AllowExceptions");
	# Pull all references that declare this function
	my @dups = $function->ent->refs("Declarein");
	next unless @dups;
	foreach my $ent(@dups) {
	  # For each reference, check to make sure the exception id is the same.
	  if ($function->ent->freetext("AllowExceptions") ne $ent->ent->freetext("AllowExceptions") ) {
	    throwError($check, $ent->ent,$file,$ent->line,$ent->column,ERR1,$ent->file->name);
	  }
	}
  }
}



















