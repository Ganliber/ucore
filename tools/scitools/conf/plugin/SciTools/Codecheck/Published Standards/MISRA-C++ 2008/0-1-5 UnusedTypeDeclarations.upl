#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => "Unused Type Declarations";

# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name{
  return '0-1-5 A project shall not contain unused type declarations';
}

# This is the full description of the rule being tested
sub description {
  return "0-1-5 (Required) A project shall not contain unused type declarations.";
}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"
<p><b>Rationale</b><br>
If a type is declared but not <i>used</i>, then it is unclear to a reviewer if the type is redundant or it has
been left unused by mistake.</p>
<p>See Section 3.5 for associated library issues.</p>
<b>Example</b><pre style="margin-top:0;padding-top:0;">
  int16_t unusedtype()
  { 
    typedef int16_t local_Type; // Non-compliant
    return 67; 
  }
  </pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}

# This determines if this script is per file
sub test_entity {
  return 1;
}

# This determines if this script is per project or per file
sub test_global {
  return 0;
}

# Any defined options go here
sub define_options{}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("c file");

  # loop through all variable types
  my @entrefs = $file->filerefs("define","Type ~class, Typedef ~class",1);
  
  # Check that each type is use
  ENT: foreach my $ref(@entrefs) {
    next ENT if $ref->ent->refs("useby ~inactive, typedby");
    $check->violation($ref->ent,$ref->file,$ref->line,$ref->column,ERR1);
  }
}
