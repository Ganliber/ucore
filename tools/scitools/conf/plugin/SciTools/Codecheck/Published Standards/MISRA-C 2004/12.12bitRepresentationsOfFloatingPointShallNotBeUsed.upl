#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Bit representation of floating-point value used by %1.';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "12.12 The underlying bit representations of floating-point values shall not be used";}

# This is the full description of the rule being tested
sub description { return "12.12 (Required) The underlying bit representations of floating-point values shall not be used.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
The storage layout used for floating-point values may vary from one compiler to another, and
therefore no floating-point manipulations shall be made which rely directly on the way the
values are stored. The in-built operators and functions, which hide the storage details from the
programmer, should be used.</p>

END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");

  # Pull a list of all floats to be tested for bit modification
  my @floats = $file->filerefs("Addr Useby");
  
  # Loop through all floats that pass their address to another object
  foreach my $float(@floats) {
    next unless $float->ent->type eq "float";
    my $name = $float->scope->name;
    my $text = $float->ent->contents;
	# Check for C type cast
	throwError($check, $float->scope,$file,$float->line,$float->column,ERR1,$float->ent->name) if $text =~ /\(.*\*\s*\)\s+&$name/;
  }
  
  # Pull a list of all unions and test for violation
  my @unions = $file->filerefs("Define", "Union");
  
  foreach my $union(@unions) {
    # Pull everything defined within this union
    my @unionDefines = $union->ent->refs("Define");
	my $flag;
	# If this union defines a float, flag for additional testing
	foreach my $firstPass(@unionDefines) {
	  $flag = 1 if $firstPass->ent->type eq "float";
	}
	next unless $flag;
	# Test if float is modified indirectly by using another defined object within the union.
	PASS: foreach my $secondPass(@unionDefines) {
	  next PASS if $secondPass->ent->type eq "float";
	  throwError($check, $secondPass->ent,$file,$secondPass->line,$secondPass->column,ERR1,$secondPass->ent->name) if $secondPass->ent->refs("ModifyBy, SetBy");
	}
  }
}














