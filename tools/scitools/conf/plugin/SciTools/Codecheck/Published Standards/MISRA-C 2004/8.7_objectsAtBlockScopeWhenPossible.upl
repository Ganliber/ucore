# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 1-16-15


# Boiler Plate code
use base ( 'Understand::Codecheck' );
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => '%1 is only used in a single function and should be defined at block scope.';


# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}


sub name { 
	return '8.7 Objects shall be local if only accessed from one function.';
}


sub description { 
	return '8.7 (Required) Objects shall be defined at block scope if they are only accessed from within a single function.';
}


sub detailed_description { 
	return <<'END_DESC'
	
The scope of objects shall be restricted to functions where possible. File scope shall only be used where objects need 
to have either internal or external linkage. Where objects are declared at file scope Rule 8.10 applies. It is considered 
good practice to avoid making identifiers global except where necessary. Whether objects are declared at the outermost or 
innermost block is largely a matter of style. "Accessing" means using the identifier to read from, write to, or take the 
address of the object.

END_DESC

}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is run per file
sub test_entity {
  return 1;
}


# This determines if this script is run on the whole project
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options {
}


# This function finds the parent file or parent function
sub findParent {

  # Walk up the parent tree until I am looking at a file or a function
  my $ent = shift;
  while ( ! $ent->kind->check( 'C File' ) and ! $ent->kind->check( 'C Function' ) ) {
    return 0 unless $ent->parent;
    $ent = $ent->parent;
  }
  return $ent;

}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check( 'C File' );

  # Pull all global objects
  my @globalObjects = $file->filerefs( 'Define, Declare', 'Global Object ~Unknown ~Unresolved', 1 );
  return unless @globalObjects;

  # Loop through each object and skip if the parent isn't a file
  OBJ : foreach my $object ( @globalObjects ) {

    next OBJ unless $object->ent->parent->kind->check( 'C File' );

    my $parent;
    my @allRefs = $object->ent->refs;

    # Check all references and test to see if they all occure within a single fire or at a global scope
    REF : foreach my $ref ( @allRefs ) {

      my $ancestor = findParent( $ref->ent );
      next REF unless $ancestor;

      next REF if $ancestor->kind->check( 'C File' );
      $parent = $ancestor unless $parent;
      next OBJ if $parent->uniquename ne $ancestor->uniquename;

    }
    $check->violation( $object->ent, $object->file, $object->line, $object->column, ERR1, $object->ent->name ) if $parent;
  }
}