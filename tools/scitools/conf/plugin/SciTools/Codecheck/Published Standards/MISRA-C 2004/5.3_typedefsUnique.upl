#This script is designed to run with Understand - CodeCheck
#Rule 5.3 A typedef name shall be a unique identifier.
use base qw(Understand::Codecheck);
use strict;


use constant ERR1 => 'Violation: typedef "%1" reused.';

sub register_tr_text {
	my $check = shift;
	$check->add_tr_text(ERR1);
}

sub name { '5.3 A typedef name shall be a unique identifier.' }

sub description { '5.3 (Required) A typedef name shall be a unique identifier.' }

sub detailed_description { <<'END_DESC'
No <i>typedef</i> name shall be reused either as a <i>typedef</i> name or for any other purpose. <i>typedef</i> names shall not be reused anywhere within a program. The same <i>typedef</i> shall not be duplicated anywhere in the source code files even if the declarations are identical. Where the type definition is made in a header file, and that header file is included in multiple source files, this rule is not violated.
END_DESC
}

sub test_language {
	my $language = shift;
	return $language eq 'C++';
}

sub test_entity { 0 }

sub test_global { 1 }

sub define_options { }


sub check {
	my $check = shift;
	
	my %seen;
	my %errors;
	foreach my $file ($check->get_files()) {
  next unless $file->kind->check('c file');
		foreach my $ref ($file->filerefs('define', 'c typedef', 0)) {
			if (defined $seen{$ref->ent->name}) {
				$check->violation($ref->ent, $file, $ref->line, $ref->column, ERR1, $ref->ent->name);
				$errors{$ref->ent->name}++;
				
				if ($errors{$ref->ent->name} == 2) {
					my $ref2 = $seen{$ref->ent->name};
					$check->violation($ref2->ent, $ref2->file, $ref2->line, $ref2->column, ERR1, $ref2->ent->name);
				}
			}
			else {
				$seen{$ref->ent->name} = $ref;
				$errors{$ref->ent->name} = 1;
			}
		}
	}
	foreach my $file ($check->get_files()) {
		foreach my $ref ($file->filerefs('define, declare', 'c function, c object', 0)) {
			if (defined $seen{$ref->ent->name}) {
				$check->violation($ref->ent, $file, $ref->line, $ref->column, ERR1, $ref->ent->name);
			}
		}
	}
	
	return;
}
