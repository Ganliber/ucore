#This script is designed to run with Understand - CodeCheck
#Rule 5.4 A tag name shall be a unique identifier. 
use base qw(Understand::Codecheck);
use strict;


use constant ERR1 => 'Violation: tag "%1" reused.';
use constant ERR2 => 'Violation: %1 "%2" used as %3.';

sub register_tr_text {
	my $check = shift;
	$check->add_tr_text(ERR1);
	$check->add_tr_text(ERR2);
}

sub name { '5.4 A tag name shall be unique.' }

sub description { '5.4 (Required) A tag name shall be a unique identifier.' }

sub detailed_description { <<'END_DESC'
No tag name shall be reused either to define a different tag or for any other purpose within the program. ISO/IEC 9899:1990 [2] does not define the behaviour when an aggregate declaration uses a tag in different forms of type specifier (<i>struct</i> or <i>union</i>). Either all uses of the tag should be in structure type specifiers, or all uses should be in union type specifiers. The same tag definition shall not be duplicated anywhere in the source code files even if the definitions are identical. Where the tag definition is made in a header file, and that header file is included in multiple source files, this rule is not violated.
END_DESC
}

sub test_language {
	my $language = shift;
	return $language eq 'C++';
}

sub test_entity { 0 }

sub test_global { 1 }

sub define_options { }


sub check {
	my $check = shift;
	my $db = $check->db;
	
	my %seen;
	my %errors;
	foreach my $file ($check->get_files()) {
    next unless $file->kind->check('c file');
		foreach my $ref ($file->filerefs('define', 'c union, c struct', 0)) {
			if (defined $seen{$ref->ent->name} && $ref->ent->name !~ "[unnamed]") {
				$check->violation($ref->ent, $file, $ref->line, $ref->column, ERR1, $ref->ent->name);
				$errors{$ref->ent->name}++;
				
				if ($errors{$ref->ent->name} == 2) {
					my $ref2 = $seen{$ref->ent->name};
					$check->violation($ref2->ent, $ref2->file, $ref2->line, $ref2->column, ERR1, $ref2->ent->name);
				}
			}
			else {
				$seen{$ref->ent->name} = $ref;
				$errors{$ref->ent->name} = 1;
			}
		}
	}
	foreach my $file ($check->get_files()) {
		foreach my $ref ($file->filerefs('define, declare', 'function, object', 0)) {
			if (defined $seen{$ref->ent->name}) {
				$check->violation($ref->ent, $file, $ref->line, $ref->column, ERR1, $ref->ent->name);
			}
		}
		
		foreach my $ref ($file->filerefs('~define', 'c object', 1)) {
			foreach my $name (keys  %seen) {
				next unless $ref->ent->type =~ m/\b$name\b/x;
				if ($seen{$name}->ent->kindname =~ m/ struct /ix && $ref->ent->type =~ m/\b union \s+(\S+) \b/x) {
					$check->violation($ref->ent, $ref->file, $ref->line, $ref->column, ERR2, 'struct', $1, 'union');
				}
			}
		}
		foreach my $ref ($file->filerefs('~define', 'c object', 1)) {
			foreach my $name (keys  %seen) {
				next unless $ref->ent->type =~ m/\b$name\b/x;
				if ($seen{$name}->ent->kindname =~ m/ union /ix && $ref->ent->type =~ m/\b struct \s+(\S+) \b/x) {
					$check->violation($ref->ent, $ref->file, $ref->line, $ref->column, ERR2, 'union', $1, 'struct');
				}
			}
		}
	}
	
	return;
}
