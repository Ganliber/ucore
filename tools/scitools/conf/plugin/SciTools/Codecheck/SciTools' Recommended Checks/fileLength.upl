# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 11/11/14


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;
use constant ERR1 => 'Max Length(%1) Exceeded: %2 lines of Code.';
use constant ERR2 => 'Max Length(%1) Exceeded: %2 lines.';
use constant OPT1 => "Maximum Lines";
use constant OPT2 => "Count only Lines of Code(ignore comment lines, blank lines, etc)";

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
  $check->add_tr_text(ERR2);
}


sub name {
  return "Files too long";
}


sub description {
  return "Program files should not have more than the specified number of lines";
}


sub detailed_description {
  return  <<"END_DESC"

<p><b>Rationale</b><br>
Long files are usually complex and difficult to read meaning they are also difficult to comprehend and to test.
</p>

END_DESC
}


sub test_language {
  return 1;
}


sub test_entity {
  return 1;
}


# This determines if this script is per project or per file
sub test_global { 
  return 0;
}


sub define_options{
 my $check = shift;
 $check->option->integer("LineLimit",OPT1,200);           
 $check->option->checkbox("CodeOnly",OPT2,0);
}


# This is the actual check being performed
sub check {

  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("file");

  my $maxLines = $check->option->lookup("LineLimit");
  my $codeOnly = $check->option->lookup("CodeOnly");

  my $lines = $file->metric("CountLine");
  my $linesCode = $file->metric("CountLineCode");

  if ($codeOnly && $linesCode > $maxLines){

    $check->violation( $file, $file, 0, 0, ERR1, $maxLines, $linesCode);

  }elsif(!$codeOnly && $lines > $maxLines){

    $check->violation( $file, $file, 0, 0, ERR2, $maxLines,$lines);

  }
}