#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson 

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Using-directive or using-declaration found in header file: %1.';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "Using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files";}

# This is the full description of the rule being tested
sub description { return "Using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
It is important to ensure that the order of inclusion of <i>header files</i> cannot affect the behaviour of
a program.</p>

<br>
<b>Example</b><pre style="margin-top:0;padding-top:0;">
  
  // f1.h
  void foo ( char_t a );
  namespace NS1
  {
    void foo( int32_t a );
  }
  inline void bar ( )
  {
    foo ( 0 );
  }

  // f2.h
  namespace NS1
  {
  }
  using namespace NS1;
  
  // f1.cc
  #include "f1.h"
  #include "f2.h"
  int32_t m1 ( )
  {
    bar ( ); // bar calls foo ( char_t );
  }
  // f2.cc
  #include "f2.h"
  #include "f1.h"
  void m2 ( )
  {
    bar ( ); // bar calls foo ( int32_t );
  }
  </pre>

<BR />

<p>
In the above example, changing the order of the header files alters the meaning of the program.</p>
<p><b>See also</b><br>
ISO/IEC 14882:2003 [1] ยง7.3.3, ยง7.3.4</p>

END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;

  # Check that we are looking at a file and that file is a header file
  return unless $file->kind->check('c file');
  return unless $file->refs("Includeby");

  # Pull all using directive and declarations
  my @allNamespaces = $file->filerefs("Using, Nameby", "Namespace");
  # Loop through each reference
  foreach my $namespace ( @allNamespaces) {
    # If namespace is used within a function or a class it is ok
    next if $namespace->scope->kindname eq 'function';
    next if $namespace->scope->kindname eq 'class';
    # At this point we know we have an error
    throwError($check, $namespace->ent, $file, $namespace->line, $namespace->column, ERR1, $namespace->scope->name);
  }
}