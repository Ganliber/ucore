use base ("Understand::Codecheck");
use strict;
use Codecheck::Libraries::NamingConventions;

my $kind = "Variable";
my $kindPlural ="Variables";
my $languageText = "C/C++";
my $languageTest = "C++";
my $canChangePrecedence = 1;
my $defaultAll =1;
my @kindStrings= qw(Global Namespace Static Const Pointer Public Protected Private Local);
my %kindNameLookup= ( Public => 'Public Member '.$kind,
                     Protected => 'Protected Member '.$kind,
                     Private => 'Private Member '.$kind,
					           Namespace => 'Global Namespace ' .$kind);

sub check {
  my ($check,$file) =@_;
  return unless $file->kind->check('c file');
  setlib();
  
  foreach my $varRef ($file->filerefs("define","object",1)){
    my $var = $varRef->ent;
    
    #Build the list of Kinds for this variable
    my $kindString = $var->kind->longname();
    $kindString .= " Const" if $var->type =~ /const /i;
    $kindString .= " Pointer" if $var->type =~ m/[*]/;
    $kindString .= " Namespace" if $varRef->scope->kind->check("namespace");
    if ($var->kind->check("global static")){
      $kindString =~ s/global//i;
    }
    
    my $varkindNameArray = getPrimaryKind($check,$kindString);
    
    my $errors = checkNamingRules($var->name,$varkindNameArray,$check);
    $check->violation($var,$file,$varRef->line(),$varRef->column,NAMEERROR,$Codecheck::Libraries::NamingConventions::kindNameLookup{$varkindNameArray},$var->name,$errors) if $errors;
  }
}

#Template code, do not modify below this line
sub setlib{
    @Codecheck::Libraries::NamingConventions::kindStrings = @kindStrings;
    %Codecheck::Libraries::NamingConventions::kindNameLookup = %kindNameLookup;
    setOptions($kind,$kindPlural,$languageText,$languageTest,$canChangePrecedence,$defaultAll);
}
sub register_tr_text {registerNamingErrors(shift);}
sub name {setlib; return "Naming Convention: $kindPlural";}
sub description {setlib;return "Define naming convention for $languageText $kindPlural";}
sub detailed_description { setlib;return getNamingDescription();}
sub test_language { setlib;return shift eq $languageTest;}
sub define_options{ setlib;setNamingOptions(shift);}
sub test_entity { return 1;}
sub test_global { return 0;}
