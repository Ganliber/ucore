#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Function identifier %1 used incorrectly';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "A Function identifier shall either be used to call the function or it shall be preceded by &";}

# This is the full description of the rule being tested
sub description { return "A function identifier shall either be used to call the function or it shall be preceded by &.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Rationale</b><br>
A function identifier can implicitly convert to a pointer to a function. In certain contexts this may
result in a well-formed program, but which is contrary to developer expectations. For example, if
the developer writes:
if ( f )
then it is not clear whether the intent is to test if the address of the function is <i>NULL</i> or if a call to
the function f() should be made and the brackets have been unintentionally omitted. The use of
the & (<i>address-of</i>) operator will resolve this ambiguity.</p>
<br>
<p><b>Exception</b><br>
Passing the function by reference, or assigning it to a reference object is not a violation of this rule.</p>
<br>

<b>Example</b><pre style="margin-top:0;padding-top:0;">

  extern void f ( void );

  if ( 0 == f )           // Non-compliant
  {
    // ...
  }

  void (*p)( void ) = f;  // Non-compliant

  if ( 0 == &f )          // Compliant
  {
    (f)();                // Compliant as function is called
  }

  void (*p)( void ) = &f; // Compliant

</pre>

END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check('c file');
  
  # Pull a list of all functions that are defined within this file
  my @functionsDefined = $file->filerefs("Define", "Function");
  return unless @functionsDefined;

  # Loop through each function that is defined
  foreach my $function ( @functionsDefined ) {

    # Loop through each use reference of that function
    my @useBys = $function->ent->refs( 'Use', 'Function' );
    foreach my $use ( @useBys ) {

      # Spin up a lexer and check if the address of the function is used correctly
      my $lexeme = $use->lexeme;
      throwError($check, $use->ent, $file, $use->line, $use->column, ERR1, $use->ent->name ) if $lexeme->prevUseful->text ne '&';

    }
  }
}