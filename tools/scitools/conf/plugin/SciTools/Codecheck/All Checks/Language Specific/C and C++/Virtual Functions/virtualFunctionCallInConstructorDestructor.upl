use base ("Understand::Codecheck");
use strict;
use constant ERRDEST => "Virtual Function called in Destructor";
use constant ERRCONST => "Virtual Function called in Constructor";

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERRDEST);
  $check->add_tr_text(ERRCONST);
}


sub name {
  return "Virtual Function Call In Constructor/Destructor";
}

sub description {
  return "No virtual functions can be called from constructors and destructors. C++ Only";
}

sub detailed_description {
  return "No virtual functions can be called from constructors and destructors. C++ Only.
  Effective C++ states that this my cause the program to behave in unpredictable ways.";
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/;
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check('c file'); 
  my @entrefs = $file->filerefs("define","member function",1);
  foreach my $ref (@entrefs) {
    my $class = $ref->scope;
    my $func = $ref->ent;
    next if !checkConstructorOrDestructor($class,$func);
    foreach my $ref ($func->refs("call","function",1)) {
        next if !checkVirtual($ref);
        if ($func->name() =~ m/~/){
          $check->violation($func,$ref->file,$ref->line,$ref->column,ERRDEST);
        }else{
          $check->violation($func,$ref->file,$ref->line,$ref->column,ERRCONST);
        }
    }
  }
}


# check if func is a constructor or destructor
sub checkConstructorOrDestructor {
    my $class = shift;
    my $func = shift;
    return (($class->name() eq $func->name()) or ($func->name() =~ m/~/));
}


# check if ref is a virtual call
sub checkVirtual {
    my $ref = shift;
    return ($ref->kind->check("virtual"));
}