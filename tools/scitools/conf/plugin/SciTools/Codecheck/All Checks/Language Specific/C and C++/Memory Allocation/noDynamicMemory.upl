#This script is designed to run with Understand - CodeCheck
#Robert Gempeler - 7/19/2010
use base ("Understand::Codecheck");
use strict;

use constant ERR1 => 'Violation: File contains invalid dynamic memory statement.';

sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub name { return "Dynamic heap memory allocation";}

sub description { return "Don't use dynamic heap memory allocation";}

sub detailed_description { return <<"END_DESC"
Check for calls to calloc, malloc,realloc and free, or the use of 'new' and 'delete'
END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

sub test_entity { return 1;}

sub test_global { return 0;}

sub define_options{}


sub check {
  my $check = shift; 
  my $file = shift; 
  return unless $file->kind->check('c file'); 
  
  my @functionCallRefs = $file->filerefs("call","function",0);
  foreach my $funcCall (@functionCallRefs){
    if ($funcCall->ent->name =~ /^calloc$|^malloc$|^realloc$|^free$/){
      $check->violation($funcCall->ent(),$file,$funcCall->line(),$funcCall->column(),ERR1);
    }
  }
  
    return unless my $lexer = $file->lexer();
  
  #check if lexeme text == "continue"; report error if match is found.
  foreach my $lexeme ($lexer->lexemes()) {
	  if ($lexeme->text() =~ /^new$|^delete$/  && $lexeme->token() eq "Keyword"){
		  $check->violation($lexeme->ent(),$file,$lexeme->line_begin(),$lexeme->column_begin(),ERR1);
	 }
  }
}
