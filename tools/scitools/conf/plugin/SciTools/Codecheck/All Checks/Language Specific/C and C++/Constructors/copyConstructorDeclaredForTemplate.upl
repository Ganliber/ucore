# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 9-10-14


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Copy constructor not declared. Classes with a single parameter template constructor need a copy constructor';


# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}


# This is the short error the Understand will use
sub name { return "A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter";}


# This is the full description of the rule being tested
sub description { return "( Required ) A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter.";}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Rationale</b><br>
Contrary to possible developer expectations, a template constructor will not suppress the compiler
generated <i>copy constructor</i>. This may lead to incorrect copy semantics for members requiring
deep copies.</p>
<br>

<b>Example</b><pre style="margin-top:0;padding-top:0;">

  class A
  {
  public:
    A ( );
    // A ( A const & rhs );     Example 1 - implicitly generated
    template <typename T>
    A ( T const & rhs )     //  Example 2
    : i ( new int32_t )
    {
      *i = *rhs.i;
    }
  private:
    int32_t * i;            // Member requires deep copy
  };

  void f ( A const & a1 )
  {
    A a2 ( a1 );            // Non-compliant - Unexpectedly uses Example 1
  }

</pre>

<p>
The implicitly generated copy constructor, Example 1, will be used to construct a2 from a1.
Therefore, a shallow copy on the pointer member i will result in both a1.i and a2.i pointing to
the same object. Was this the intent, or was it expected that a new object would be created and
initialized?</p>
<br>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}


# This determines if this script is per file
sub test_entity { return 1;}


# This determines if this script is per project or per file
sub test_global { return 0;}


# Any defined options go here
sub define_options{
}


# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation( $ent, $file, $line, $column, $error, $name );
}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check('c file');
  
  # Pull all the classes
  my @classesDefined = $file->filerefs( 'Define', 'Class', 0 );
  return unless @classesDefined;

  # Set error flags
  my $doesNothaveCopyConstructor = 1;
  my $hasTemplateConstructor = 0;

  # Loop through all the defined classes
  CLS : foreach my $class ( @classesDefined ) {

    # Check to see if this class has a template constructor, move on if not
    my @templatesDefined = $class->ent->refs( 'Define', 'Member Function Template' );
    next CLS unless @templatesDefined;

    # Loop through each template looking for one with a single generic parameter
    TEMP : foreach my $template ( @templatesDefined ) {

      # Make sure we are looking at a template constructor
      next TEMP unless $template->ent->longname eq $template->ent->name . '::' . $template->ent->name;
      next TEMP unless $template->ent->freetext("Inline");

      # Start at the function definition and walk backwards
      my $lexeme = $template->lexeme;

      # Set a flag and walk backwards until we see the 'template' keyword
      my $genericType = 0;
      while ( $lexeme->text ne 'template' ) {

        # If we see a comma we know we have more than one template parameter, and that is outside the scope of this check
        if ( $lexeme->text eq ',' ) {
          next TEMP;
        # If we see a keyword, because of the nature of templates, it should mean the template has a generic type
        } elsif ( $lexeme->token eq 'Keyword' ){
          $genericType = 1;
        }
        $lexeme = $lexeme->prevUseful;

      }
      $hasTemplateConstructor = 1 if $genericType;

      ######
      #throwError( $check, $class->ent, $class->file, $class->line, $class->column, $template->ent->freetext("Inline") )
      ######

    }

    # Pull everything defined and look for copy constructors
    my @methodsDeclared = $class->ent->refs( 'Declare', 'Member Function' );
    next CLS unless @methodsDeclared;

    # Loop through each method looking for a copy constructor
    METH : foreach my $method ( @methodsDeclared ) {

      # Go through both types of copy constructors and make sure this isn't an operator overload
      next METH unless $method->ent->longname eq $method->ent->name . '::' . $method->ent->name;
      $doesNothaveCopyConstructor = 0 if $method->ent->parameters =~ /^const\s+[a-zA-Z0-9_]+\s*\&\s*[a-zA-Z0-9_]*$/;
      $doesNothaveCopyConstructor = 0 if $method->ent->parameters =~ /^[a-zA-Z0-9_]+\s*\&\s*[a-zA-Z0-9_]*$/;
      ######
      #throwError( $check, $class->ent, $class->file, $class->line, $class->column, 'Changing constructor value' )
      ######

    }

    ######
    #throwError( $check, $class->ent, $class->file, $class->line, $class->column, $doesNothaveCopyConstructor );
    #throwError( $check, $class->ent, $class->file, $class->line, $class->column, $hasTemplateConstructor );
    ######
    throwError( $check, $class->ent, $class->file, $class->line, $class->column, ERR1, $class->ent->name ) if $doesNothaveCopyConstructor and $hasTemplateConstructor;
  }
}