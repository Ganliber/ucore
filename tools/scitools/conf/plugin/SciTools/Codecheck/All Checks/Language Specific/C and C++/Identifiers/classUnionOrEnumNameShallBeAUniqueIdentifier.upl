#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'The class, union or enum name %1, has been reused';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "A class, union or enum name (including qualification, if any) shall be a unique identifier";}

# This is the full description of the rule being tested
sub description { return "A class, union or enum name (including qualification, if any) shall be a unique identifier.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
Reusing a <i>class</i>, <i>union</i> or <i>enum</i> name, either as another type or for any other purpose, may lead to
developer confusion.</p>
<br>
<p>
The <i>class</i>, <i>union</i> or <i>enum</i> name shall not be duplicated anywhere in the project, even if the
declarations are identical.</p>
<br>
<p>
This rule is not violated when the definition is made in a <i>header file</i>, and that <i>header file</i> is
included in multiple source files.</p>
<br>
<b>Example</b><pre style="margin-top:0;padding-top:0;">
  void f1 ( )
  {
    class TYPE { };
  }
  void f2 ( )
  {
    float32_t TYPE; // Non-compliant
  }
</pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 1;}

# Any defined options go here
sub define_options{
  my $check = shift;
  $check->option->checkbox("Global","Test all identifiers against all classes, enums and unions in entire project?",0) # create a checkbox option
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  
  # Test if we are inside a global check or per file check
  my $testGlobal = $check->option->lookup("Global");
  return if $file && $testGlobal;
  return if !$file && !$testGlobal;
  
  # Use the results above to create our list of entities to be tested
  my @entities;
  @entities = $check->db->ents("c Enum ~unresolved ~undefined, c Union ~unresolved ~undefined, c Class ~unresolved ~undefined") if $testGlobal;
  @entities = map{$_->ent;}$file->filerefs("Define","c Enum, c Union,c Class") if $file;
  
  #Create a hash to serve as a database of Enum, Union, and Class names
  my %data = ();
  
  # Loop through each object
  foreach my $ent(@entities) {
	my $name = $ent->name;
	if ( exists  $data{ $name } ) {
	  throwError($check, $ent,$file,$ent->ref->line,$ent->ref->column,ERR1,$name);
	}
	else {
	  $data{$name} = 1;
	}
  }
  
  # Pull everything else
  my @others;
  @others = $check->db->ents("~Enum ~Union ~Class ~unresolved ~undefined") if $testGlobal;
  @others = map{$_->ent;}$file->filerefs("Define","~Enum ~Union ~Class") if $file;
  
  # Loop through everything else
  foreach my $match(@others) {
	my $matchName = $match->name;
	if ( exists  $data{ $matchName } && ( $match->longname !~ /^${matchName}::${matchName}$/ ) ) {
	  throwError($check, $match,$file,$match->ref->line,$match->ref->column,ERR1,$matchName);
	}
  }
}


















