#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'More than one # or ## operator used a single macro in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "There shall be at most one occurrence of the # or ## operators in a single macro definition";}

# This is the full description of the rule being tested
sub description { return "There shall be at most one occurrence of the # or ## operators in a single macro definition.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b>
The order of evaluation associated with both the # and ## preprocessor operators is unspecified.
This problem can be avoided by having only one occurrence of either operator in any single macro
definition (i.e. one #, <b>or</b> one ## <b>or</b> neither).</p>

<b>Example</b><pre style="margin-top:0;padding-top:0;">
#define A(x) #x // Compliant
#define B(x, y) x ## y // Compliant
#define C(x, y) # x ## y // Non-compliant

In the following, if y is joined to z first then the fourth parameter of D will be substituted and
joined to x. Alternatively, if x is joined with y first, then the fourth parameter of D will not be
substituted.

#define D(x, y, z, yz) x ## y ## z // Non-compliant
</pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file ~unknown ~unresolved");
  
  # Loop through each macro and check for all combinations of violation
  foreach my $macro($file->filerefs("define","macro",1)){
    if($macro->ent->value =~ /[^#]*#[^#]+#[^#]*/ || $macro->ent->value =~ /[^#]*##[^#]+#[^#]*/ || $macro->ent->value =~ /[^#]*#[^#]+##[^#]*/ || 
	  $macro->ent->value =~ /[^#]*##[^#]+##[^#]*/){
	  # Throw violation
 	  $check->violation($macro->ent,$file,$macro->line,$macro->column,ERR1,$file->name);
 	}
  }
}
