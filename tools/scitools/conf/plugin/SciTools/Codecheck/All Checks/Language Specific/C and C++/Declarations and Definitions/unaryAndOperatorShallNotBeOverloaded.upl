#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Unary & has been overloaded';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "The unary & operator shall not be overloaded";}

# This is the full description of the rule being tested
sub description { return "The unary & operator shall not be overloaded.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
Taking the address of an object of incomplete type where the complete type contains a user
declared operator & leads to <i>undefined behaviour</i>.</p>
<br>
<b>Example</b><pre style="margin-top:0;padding-top:0;">

  // A.h
  class A
  {
  public:
    A * operator & ( ); // Non-compliant
  };

  // f1.cc
  class A;
  void f ( A & a )
  {
    &a; // uses built-in operator &
  }
  // f2.cc

  #include "A.h"
  void f2 ( A & a )
  {
    &a; // use user-defined operator &
  }

</pre>

<br>
<p><b>See also</b><br>
ISO/IEC 14882:2003 [1] ยง5.3.1(4)</p>
<br>


END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check('c file');
  
  # Pull a list of all functions that are defined within this file
  my @objectsDefined = $file->filerefs("Define", "~Object ~Parameter");
  return unless @objectsDefined;

  # Loop through each variable that is defined
  foreach my $object ( @objectsDefined ) {

    # Pull text of function
    my $text = $object->ent->contents;
    # Remove any // style comments
    $text =~ s/\/\/.*\n/\n/g;
    # Remove any /* */ style comments
    $text =~ s/\/\*.*\*\//\n/gs;
    
    # See if & is over loaded
    throwError($check, $object->ent, $file, $object->line, $object->column, ERR1 ) if $text =~ /\s+operator\s*\&/;

  }
}