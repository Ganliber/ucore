use base ("Understand::Codecheck");
use strict;

use constant ERR1 => 'Assignment operator Parameter %1 is not const';
use constant ERR2 => "Assignment operator returns const or void";
use constant ERR3 => "Assignment operator does not return this";

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
  $check->add_tr_text(ERR2);
  $check->add_tr_text(ERR3);
}


sub name {
  return "Assignment Operator Return This";
}

sub description {
  return "Assignment operator must return a const ref to the assigning object (this).";
}

sub detailed_description {
  return " Assignment operator must return a const ref to the assigning object (this).
Assumptions:
   1. The parameter should be const.
   2. The return type should be non-const (and non-void).
   3. The returned object should be *this.";
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/;
}

sub test_entity {
  return 1;
}


sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check('c file');
  
  # create lexer once for file
  my $lexer = undef;
  # loop through member functions defined in the file
  foreach my $ref ($file->filerefs("define","member function ~static",1)) {
      my $func = $ref->ent();
      next if $func->name() ne "operator=";
      my ($begin,$end) = getFunctionDefnLines($func);
      next if (!$begin);

      $lexer = $file->lexer() if (!$lexer);
      return unless $lexer;
      do_one_function($check,$file,$func,$lexer,$begin,$end);
  }
}


# Check one function.
sub do_one_function {
    my $check = shift;
    my $file = shift;
    my $func = shift;
    my $lexer = shift;
    my $begin = shift;
    my $end = shift;

    # check that parameter type is const
    my $param = $func->ents("define","parameter");
    Violation1($check,$func,$param,$file,$begin) if ($param && $param->type() !~ m/const/);

    # check that return type is non-const, non-void
    my $type = $func->type();
    Violation2($check,$func,$file,$begin) if ($type =~ m/const/);
    Violation2($check,$func,$file,$begin) if ($type eq "void");

    # check that returns always include 'this'
	# setup lexemes
    my $lexeme_pos = 0;
    my @lexemes = $lexer->lexemes($begin,$end);
    my $lexeme = NextLexeme(\@lexemes, \$lexeme_pos);
	
    while ($lexeme) {
  if ($lexeme->text() eq "return") {
      while ($lexeme) {
    last if $lexeme->text() eq "this";
    Violation3($check,$func,$lexeme,$file) if $lexeme->text() eq ";";
    $lexeme = NextLexeme(\@lexemes, \$lexeme_pos);
      }
  }
  $lexeme = NextLexeme(\@lexemes, \$lexeme_pos);
    }
}


sub Violation1 {
    my $check = shift;
    my $func = shift;
    my $param = shift;
    my $file =shift;
    my $begin = shift;
    $check->violation($func,$file,$begin,-1,ERR1,$param->name());
}


sub Violation2 {
    my $check = shift;
    my $func = shift;
    my $file = shift;
    my $begin = shift;
    $check->violation($func,$file,$begin,-1,ERR2);
}


sub Violation3 {
    my $check = shift;
    my $func = shift;
    my $lexeme = shift;
    my $file = shift;
    $check->violation($func,$file,$lexeme->line_begin(),$lexeme->column_begin(),ERR3);
}


# Pass a function entity. Return an array of:
#   the begin line
#   the end line
#   the defn file entity
# Return undef if this info cannot be provided.
sub getFunctionDefnLines {
    my $func = shift;
    my $begin_ref = $func->ref("definein");
    my $end_ref = $func->ref("end");
    return undef if (!$begin_ref || !$end_ref);
    return ($begin_ref->line(), $end_ref->line(), $begin_ref->file());
}


# Return the next interesting lexeme or undef when all lexemes
# are used.
sub NextLexeme {
    my $lexemes = shift;
    my $lexeme_pos = shift;
    while (${$lexeme_pos} < $#$lexemes) {
      my $lexeme = $lexemes->[${$lexeme_pos}++];
	  next if ($lexeme->token() =~ m/Comment|Whitespace|Newline/);
	  return $lexeme;
    };
    return undef;
}

1;
