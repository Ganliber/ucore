# This script is designed to run with Understand - CodeCheck
# Rewritten by Kyle Jackson
# 12-4-14


# Boiler Plate code
use base ( 'Understand::Codecheck' );
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'This header file will violate the One Definition Rule if included more than once because if defines %1.';


# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}


# This is the short error the Understand will use
sub name { 
  return 'It shall be possible to include any header file in multiple translation units without violating the One Definition Rule';
}


# This is the full description of the rule being tested
sub description { 
  return '(Required) It shall be possible to include any header file in multiple translation units without violating the One Definition Rule.';
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Rationale</b><br>
Header files should be used to declare objects, functions, inline functions, function templates,
typedefs, macros, classes, and class templates and shall not contain or produce definitions of
objects or functions (or fragment of functions or objects) that occupy storage.
</p>

<p>
A header file is considered to be any file that is included via the #include directive, regardless of
name or suffix.
</p>

<b>Example</b><pre style="margin-top:0;padding-top:0;">

  // a.h
  void f1 ( );            // Compliant
  void f2 ( ) { }         // Non-compliant
  inline void f3 ( ) { }  // Compliant
  template <typename T>
  void f4 ( T ) { }       // Compliant
  int a;                  // Non-compliant

  // a.cpp
  #include "a.h"

</pre>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is per file
sub test_entity {
  return 1;
}


# This determines if this script is per project or per file
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options {
}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check('c header file');

  # Pull all objects and functions defined
  my @objectsDefined = $file->filerefs( 'Define', 'Object Global, Function' );

  # Throw an error for each definition
  foreach my $object ( @objectsDefined ) {

    $check->violation ( $object->ent, $object->file, $object->line, $object->column, ERR1, $object->ent->name );

  }
}