#This script is designed to run with Understand - CodeCheck
use base ("Understand::Codecheck");
use strict;


use constant ERR1 => 'Identifier %1 reused';

sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub name { return "Identifier name reuse";}

sub description { return "Do not reuse identifiers";}

sub detailed_description { return <<"END_DESC"
Find identifiers that reuse names from other identifiers.
Exceptions should be entered in a comma delimited list.
To Ignore Overloads, check the box in the Options window.
END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

sub test_entity { return 0;}

sub test_global { return 1;}

sub define_options{
  my $check = shift;
    $check->option->text('exceptions','Exceptions (Comma delimited)','');
	$check->option->checkbox('overloads','Ignore Overloads','');
}

sub check {
  my $check = shift; 
  my %entNames;
  my $prevent;
  my $prevParent;
  my $textList = $check->option->lookup('exceptions');
  $textList =~ s/\s//g; #Strip whitespace in list;
  my @exceptions = split(',',$textList);
  my @ents = $check->db->ents("c ~unknown ~unresolved ~unnamed");
  foreach my $ent (sort {$a->name cmp $b->name;} @ents){
    next if $ent->name ~~ @exceptions;
    next if $ent->library eq "Standard";
    if ($entNames{$ent->name}){
	  if($ent->kind("Function") && $check->option->lookup('overloads')){
		next if($ent->parent && $ent->parent->id == $prevParent);
	  }
      if ($prevent && reference($prevent)){
		
        my $ref = reference($prevent);
        $check->violation($prevent,$ref->file,$ref->line,$ref->column,ERR1,$prevent->name);
      }
      my $ref = reference($ent);
      if($ref){
        $check->violation($ent,$ref->file,$ref->line,$ref->column,ERR1,$ent->name);
      }
      else{
        $check->violation(0,0,-1,-1,ERR1,$ent->name);
      }
      $prevent = "";
    }
    else {
      $entNames{$ent->name} = 1;
	  $prevParent = $ent->parent->id() if $ent->parent;
      $prevent = $ent;
    }
  }

}

sub reference {
  my $ent = shift;
  return unless $ent;
  my $defined = $ent->ref("definein, declarein","c");
  return $defined if $defined;
   return $ent->ref if $ent->ref;
   return;
}