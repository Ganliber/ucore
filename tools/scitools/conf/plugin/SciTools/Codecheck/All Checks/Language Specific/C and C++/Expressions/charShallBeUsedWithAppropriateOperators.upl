#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Char used with an incorrect operator in %1.';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

# This is the short error the Understand will use
sub name { return "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary & operator";}

# This is the full description of the rule being tested
sub description { return "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary & operator.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
Manipulation of character data may generate results that are contrary to developer expectations.
For example, ISO/IEC 14882:2003 [1] §2.2(3) only requires that the digits "0" to "9" have
consecutive numerical values.</p>
<br>
<p><b>Exception</b><br>
Exceptionally, the following operators may be used if the associated restriction is observed:<BR>
 • The binary + operator may be used to add an integral value in the range 0 to 9 to '0';<BR>
 • The binary – operator may be used to subtract character '0';<BR>
 • The relational operators <, <=, >, >= may be used to determine if a character (or wide
   character) represents a digit.</p>
<br>
<p><b>Developer's Node:</b><br>
The ==, != and unary & operator works as expected with this check; however, because of the nature 
of the assignment operator '=' and the nature of epressions, it is not always possible to know the
value on the right hand side of the assignment operator prior to runtime. Because of this limitation, 
ensuring the right hand side of the assignment operator does not violate this rule must be done by 
the developer.<BR>
<BR>
Additionally, the same limitation applies to the exceptions mentioned above. This check, when presented
with a +, - or relational operator, this script checks to see if the char is being modified by an 
appropriate string literal or an approprate integer literal. If neither of those conditions are found, 
this script will throw a violation. This does not mean that a violation exists, but that ensuring there 
is no violation must now fall upon the developer.
</p>
<br?
<b>Example</b><pre style="margin-top:0;padding-top:0;">
  char_t ch = 't'; // Compliant
  uint8_t v;
  if ( ( ch >= 'a' ) && ( ch <= 'z' ) ) // Non-compliant
  {
  }
  if ( ( ch >= '0' ) && ( ch <= '9' ) ) // Compliant by exception
  {
    v = ch – '0'; // Compliant by exception
    v = ch – '1'; // Non-compliant
  }
  else
  {
    // ...
  }
  ch = '0' + v; // Compliant by exception
  ch = 'A' + v; // Non-compliant
</pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
}

# Use this function for throwing errors
sub throwError {
  my $check = shift;
  my $ent = shift;
  my $file = shift;
  my $line = shift;
  my $column = shift;
  my $error = shift;
  my $name = shift;
  $check->violation($ent,$file,$line,$column,$error,$name);
}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check('c file');

  # Pull a list of all char use refs
  my @chars = $file->filerefs("Use");
  
  # Loop through all enumerator references and check if they are being used correctly
  foreach my $char(@chars) {
    next unless $char->ent->type eq "char";
	
	# Set all need variables for the check
    my $flag = 0;
    my $lexeme = $char->lexeme;
	
	my $backOne = $lexeme->previous->text;
	my $backTwo = $lexeme->previous->previous->text;
	my $backThree = $lexeme->previous->previous->previous->text;
	my $backFour = $lexeme->previous->previous->previous->previous->text;
	
	my $forwardOne = $lexeme->next->text;
	my $forwardTwo = $lexeme->next->next->text;
	my $forwardThree = $lexeme->next->next->next->text;
	my $forwardFour = $lexeme->next->next->next->next->text;
	
	my $bfirst = $lexeme->previous->token;
	my $bsecond = $lexeme->previous->previous->token;
	my $bthird = $lexeme->previous->previous->previous->token;
	my $bfourth = $lexeme->previous->previous->previous->previous->token;
	
	my $ffirst = $lexeme->next->token;
	my $fsecond = $lexeme->next->next->token;
	my $fthird = $lexeme->next->next->next->token;
	my $ffourth = $lexeme->next->next->next->next->token;
	
	# Test each of the above variables for text that should contain = == != & < <= > >= ( )
	$flag = 1 if $backOne =~ /\+|\-|\*|\/|%|\+\+|\-\-|!|&&|\|\||~|\||\^|<<|>>|\->|\.|\->\*|\.\*|\[|\]|<|<=|>|>=/;
	$flag = 1 if $backTwo =~ /\+|\-|\*|\/|%|\+\+|\-\-|!|&&|\|\||~|\||\^|<<|>>|\->|\.|\->\*|\.\*|\[|\]|<|<=|>|>=/;
	$flag = 1 if $forwardOne =~ /\+|\-|\*|\/|%|\+\+|\-\-|!|&&|\|\||~|\||\^|<<|>>|\->|\.|\->\*|\.\*|\[|\]|<|<=|>|>=/;
	$flag = 1 if $forwardTwo =~ /\+|\-|\*|\/|%|\+\+|\-\-|!|&&|\|\||~|\||\^|<<|>>|\->|\.|\->\*|\.\*|\[|\]|<|<=|>|>=/;
	
	if ( $backOne eq "&" || $backTwo eq "&" ) {
	  $flag = 1 if $bfirst eq "Operator" && $bsecond eq "Identifier";
	  $flag = 1 if $bfirst eq "Operator" && $bthird eq "Identifier";
	  $flag = 1 if $bsecond eq "Operator" && $bthird eq "Identifier";
	  $flag = 1 if $bsecond eq "Operator" && $bfourth eq "Identifier";
	}
	
	if ( $backOne eq "+" || $backTwo eq "+" ) {
	  $flag = 0 if $bfirst eq "Operator" && $bsecond eq "String" && $backTwo =~ /[0-9]/;
	  $flag = 0 if $bfirst eq "Operator" && $bthird eq "String" && $backThree =~ /[0-9]/;
	  $flag = 0 if $bsecond eq "Operator" && $bthird eq "String" && $backThree =~ /[0-9]/;
	  $flag = 0 if $bsecond eq "Operator" && $bfourth eq "String" && $backFour =~ /[0-9]/;
	}
	
	if ( $forwardOne eq "+" || $forwardTwo eq "+" ) {
	  $flag = 0 if $ffirst eq "Operator" && $fsecond eq "String" && $forwardTwo =~ /[0-9]/;
	  $flag = 0 if $ffirst eq "Operator" && $fthird eq "String" && $forwardThree =~ /[0-9]/;
	  $flag = 0 if $fsecond eq "Operator" && $fthird eq "String" && $forwardThree =~ /[0-9]/;
	  $flag = 0 if $fsecond eq "Operator" && $ffourth eq "String" && $forwardFour =~ /[0-9]/;
	}
	
	if ( $forwardOne eq "-" || $forwardTwo eq "-" ) {
	  $flag = 0 if $ffirst eq "Operator" && $fsecond eq "String" && $forwardTwo =~ /0/;
	  $flag = 0 if $ffirst eq "Operator" && $fthird eq "String" && $forwardThree =~ /0/;
	  $flag = 0 if $fsecond eq "Operator" && $fthird eq "String" && $forwardThree =~ /0/;
	  $flag = 0 if $fsecond eq "Operator" && $ffourth eq "String" && $forwardFour =~ /0/;
	}
	
	if ( $backOne =~ /<|<=|>|>=/ || $backTwo =~ /<|<=|>|>=/ ) {
	  $flag = 0 if $bfirst eq "Operator" && $bsecond eq "String" && $backTwo =~ /[0-9]+/;
	  $flag = 0 if $bfirst eq "Operator" && $bthird eq "String" && $backThree =~ /[0-9]+/;
	  $flag = 0 if $bsecond eq "Operator" && $bthird eq "String" && $backThree =~ /[0-9]+/;
	  $flag = 0 if $bsecond eq "Operator" && $bfourth eq "String" && $backFour =~ /[0-9]+/;
	}
	
	if ( $forwardOne =~ /<|<=|>|>=/ || $forwardTwo =~ /<|<=|>|>=/ ) {
	  $flag = 0 if $ffirst eq "Operator" && $fsecond eq "String" && $forwardTwo =~ /[0-9]+/;
	  $flag = 0 if $ffirst eq "Operator" && $fthird eq "String" && $forwardThree =~ /[0-9]+/;
	  $flag = 0 if $fsecond eq "Operator" && $fthird eq "String" && $forwardThree =~ /[0-9]+/;
	  $flag = 0 if $fsecond eq "Operator" && $ffourth eq "String" && $forwardFour =~ /[0-9]+/;
	}
	
	throwError($check, $char->ent,$file,$char->line,$char->column,ERR1,$char->scope->name) if $flag;
	
  }
}














