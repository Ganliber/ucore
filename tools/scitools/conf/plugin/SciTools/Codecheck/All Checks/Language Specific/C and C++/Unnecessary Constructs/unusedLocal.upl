# Unused local variables.
use base ("Understand::Codecheck");
use strict;
use constant ERR1 => "Unused Local Variable";

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}


sub name{
  return 'Unused Local Variables';
}

sub description {
  return "Find Local Variables that are defined but not used.";
}

sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
Local variables that are defined but not used can lead to memory management issues as well as making 
code more difficult to follow. They can also be indicitive of an error where a programmer meant to use 
one variable and accidently used another. This check ignores references inside inactive code (ie #if 0...#endif).</p>
END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/;
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check('c file');

  
  # loop through local variables
  my @entrefs = $file->filerefs("define","object local ~member ~unknown ~unresolved, parameter ~unknown ~unresolved",1);
  foreach my $ref(@entrefs) {
    next if $ref->ent->refs("setby ~init,useby ~inactive, modifyby, callby");
    $check->violation($ref->ent,$ref->file,$ref->line,$ref->column,ERR1);
  }
}
