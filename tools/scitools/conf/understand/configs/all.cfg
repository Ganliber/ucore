#
# Understand Config file.
# Build 761
#
# Update: 12 Jan 2015
#


#
# DEFAULTS
#

Arrow: with = Single;
Arrow: solidSingle;

Shape: ada constant = roundedrectangle;
Shape: ada entry = parallelogram;
Shape: ada file = roundedrectangle;
Shape: ada exception = octagon;
Shape: ada protected = parallelogram;
Shape: ada task = parallelogram;
Shape: assembly class = hexagon;
Shape: assembly constant = roundedrectangle;
Shape: assembly variable = roundedrectangle;
Shape: assembly macro = octagon;
Shape: c macro = octagon;
Shape: csharp const = roundedrectangle;
Shape: csharp event = roundedrectangle;
Shape: csharp field = roundedrectangle;
Shape: csharp indexer = roundedrectangle;
Shape: csharp property = roundedrectangle;
Shape: fortran common = octagon;
Shape: fortran datapool = octagon;
Shape: fortran dummy argument = roundedrectangle;
Shape: fortran file = roundedrectangle;
Shape: fortran interface = parallelogram;
Shape: fortran module = parallelogram;
Shape: fortran namelist variable = octagon;
Shape: fortran pointer = octagon;
Shape: java class = hexagon;
Shape: java parameter = roundedrectangle;
Shape: java variable = roundedrectangle;
Shape: pascal parameter = roundedrectangle;
Shape: pascal sql = octagon;
Shape: python class = hexagon;
Shape: python parameter = roundedrectangle;
Shape: python property = roundedrectangle;
Shape: vhdl architecture = octagon;
Shape: vhdl process = octagon;
Shape: web class = hexagon;
Shape: web constant = roundedrectangle;
Shape: web directive = roundedrectangle;
Shape: web parameter = roundedrectangle;
Shape: web property = roundedrectangle;
Shape: web variable = roundedrectangle;

Shape: file = parallelogram;
Shape: object = roundedrectangle;
Shape: type = hexagon;
Shape: variable = roundedrectangle;
Shape: rectangle;

Size: ada file = double;
Size: ada package = double;
Size: ada protected = double;
Size: ada protected type = double;
Size: ada tagged type = double;
Size: ada task = double;
Size: fortran file = double;
Size: fortran module = double;
Size: java package = double;
Size: jovial module = double;
Size: pascal compunit = double;
Size: vhdl package = double;
Size: single;

Slash: ada block = true;
Slash: ada protected = true;
Slash: ada protected type = true;
Slash: fortran intrinsic = true;
Slash: constant = true;
Slash: false;

Style: ada abstract = dashed;
Style: ada generic = dashed;
Style: ada protected type = dashed;
Style: ada task type = dashed;
Style: java abstract = dashed;
Style: java interface = dashed;
Style: web abstract = dashed;
Style: web interface = dashed;
Style: unknown = dotted;
Style: unresolved = dotted;
Style: solid;


ArrowDir: down;
Background: white;
Fontcolor: brown;
Linecolor: red;



#
# EXCLUDES
#

ExcludeEntityList:
  "ConstantsExcludeEntity",
  "GlobalsExcludeEntity",
  "IntrinsicExcludeEntity",
  "LocalExcludeEntity",
  "LocalsExcludeEntity",
  "RoutinesExcludeEntity",
  "ObjectsExcludeEntity",
  "OperatorsExcludeEntity",
  "SqlExcludeEntity",
  "SystemExcludeEntity",
  "TypesExcludeEntity",
  "UnresolvedExcludeEntity",
  "VariablesExcludeEntity";


#
# OPTIONS
#

#
# Accessed by
#

Option "Accessed by" = "Off";
Option "Accessed by" [Default] = "On";
Option "Accessed by" [Hidden,Reload];


#
# Accesses
#

Option "Accesses" = "Off";
Option "Accesses" [Default] = "On";
Option "Accesses" [Hidden,Reload];


#
# Base Classes
#

Option "Base Classes" = "Off";
Option "Base Classes" [Default] = "On";
Option "Base Classes" [Hidden,Reload];


#
# Calls
#

Option "Calls" = "Off";
Option "Calls" [Default] = "On";
Option "Calls" [Hidden,Reload];


#
# Called By
#

Option "Called By" = "Off";
Option "Called By" [Default] = "On";
Option "Called By" [Hidden,Reload];


#
# Comments
#

Option "Comments" [Default] = "Off"  { Comments: ""; };
Option "Comments" = "On" { Comments: "[comments]"; };
Option "Comments" [Hidden,Reload];


#
# Constants
#

Option "Constants"           = "Off"  { ConstantsExcludeEntity: constant,const; };
Option "Constants" [Default] = "On" {};
Option "Constants" [Hidden, Reload];


#
# Default Members
#

Option "Default Members" = "Off";
Option "Default Members" [Default] = "On";
Option "Default Members" [Hidden,Reload];


#
# Derived Classes
#

Option "Derived Classes" = "Off";
Option "Derived Classes" [Default] = "On";
Option "Derived Classes" [Hidden,Reload];


#
# Duplicate Subtrees
#

Option "Duplicate Subtrees"           = "Hide" { DuplicateSubtrees: 0; };
Option "Duplicate Subtrees" [Default] = "Show" {
  DuplicateSubtrees: 1;
  DuplicateSubtreesMaxNodes: 1000;
};
Option "Duplicate Subtrees" [Hidden, Reload];


#
# Extends
#

Option "Extends" = "Off";
Option "Extends" [Default] = "On";
Option "Extends" [Hidden,Reload];


#
# Extended By
#

Option "Extended By" = "Off";
Option "Extended By" [Default] = "On";
Option "Extended By" [Hidden,Reload];


#
# External Functions
#

Option "External Functions" = "Off";
Option "External Functions" [Default] = "On";
Option "External Functions" [Hidden,Reload];


#
# Filename
#

Option "Filename" [Default] = "None"      { Filename: ""; };
Option "Filename"           = "Shortname" {
  Filename: unresolved, unknown = "";
  Filename: "\n \[[name]\]";
  };
Option "Filename"           = "Fullname"  {
  Filename: unresolved, unknown = "";
  Filename: "\n \[[fullname]\]";
  };
Option "Filename"           = "Relative"  {
  Filename: unresolved, unknown = "";
  Filename: "\n \[[relativename]\]";
  };
Option "Filename" [Hidden, Reload];


#
# Function Pointer
#

Option "Function Pointer" = "Off"   { ExcludeRelation: ptr,use,useby,deref call,deref callby; };
Option "Function Pointer" [Default] = "On"  {};
Option "Function Pointer" [Hidden, Reload];


#
# Globals
#

Option "Globals" = "Off" { GlobalsExcludeEntity: global; };
Option "Globals" [Default] = "On"  {};
Option "Globals" [Hidden, Reload];


#
# Implements
#

Option "Implements" = "Off";
Option "Implements" [Default] = "On";
Option "Implements" [Hidden,Reload];


#
# Implemented By
#

Option "Implemented By" = "Off";
Option "Implemented By" [Default] = "On";
Option "Implemented By" [Hidden,Reload];


#
# Imports
#

Option "Imports" = "Off";
Option "Imports" [Default] = "On";
Option "Imports" [Hidden,Reload];


#
# Included by
#

Option "Included by" = "Off";
Option "Included by" [Default] = "On";
Option "Included by" [Hidden,Reload];


#
# Includes
#

Option "Includes" = "Off";
Option "Includes" [Default] = "On";
Option "Includes" [Hidden,Reload];


#
# Inherited by
#

Option "Inherited by" = "Off";
Option "Inherited by" [Default] = "On";
Option "Inherited by" [Hidden,Reload];


#
# Inherits
#

Option "Inherits" = "Off";
Option "Inherits" [Default] = "On";
Option "Inherits" [Hidden,Reload];


#
# Intrinsic
#

Option "Intrinsic"           = "Off" { IntrinsicExcludeEntity: intrinsic; };
Option "Intrinsic" [Default] = "On"  {};
Option "Intrinsic" [Hidden, Reload];


#
# Layout
#

Option "Layout"           = "Crossing"                { Layout: crossing; };
Option "Layout" [Default] = "Horizontal Non-crossing" { Layout: nonCrossing; };
Option "Layout"           = "Vertical Non-crossing"   { Layout: vertNonCrossing; };
Option "Layout" [Hidden, Reload];


#
# Level
#

Option "Level"           = "All Levels" { Level: 0; };
Option "Level" [Default] = "1 Level"  { Level: 1; };
Option "Level"           = "2 Levels" { Level: 2; };
Option "Level"           = "3 Levels" { Level: 3; };
Option "Level"           = "4 Levels" { Level: 4; };
Option "Level"           = "5 Levels" { Level: 5; };
Option "Level" [Hidden, Reload];


#
# Local
#

Option "Local"           = "Off"  { LocalExcludeEntity: local; };
Option "Local" [Default] = "On"   {};
Option "Local" [Hidden, Reload];


#
# Locals
#

Option "Locals" = "Off" { LocalsExcludeEntity: local; };
Option "Locals" [Default] = "On"  {};
Option "Locals" [Hidden, Reload];


#
# Members
#

Option "Members" [Default] = "None";
Option "Members" = "Components";
Option "Members" = "Operations";
Option "Members" = "Components & Operations";
Option "Members" [Hidden,Reload];


#
# Name
#
Option "Name" [Default] = "Shortname" { Name: "[shortname]";     };
Option "Name"           = "Fullname"  { Name: "[fullname]"; };
Option "Name" [Global, Reload];


#
# Objects
#

Option "Objects"           = "Off"  { ObjectsExcludeEntity: object ~constant; };
Option "Objects" [Default] = "On" {};
Option "Objects" [Hidden, Reload];


#
# Operators
#

Option "Operators"           = "Off"  { OperatorsExcludeEntity: operator; };
Option "Operators" [Default] = "On" {};
Option "Operators" [Hidden, Reload];


#
# Parameters
#

Option "Parameters" [Default] = "Off";
Option "Parameters" = "On";
Option "Parameters" [Hidden,Reload];


#
# Private
#

Option "Private" = "Off";
Option "Private" [Default] = "On";
Option "Private" [Hidden,Reload];


#
# Protected
#

Option "Protected" = "Off";
Option "Protected" [Default] = "On";
Option "Protected" [Hidden,Reload];


#
# Public
#

Option "Public" = "Off";
Option "Public" [Default] = "On";
Option "Public" [Hidden,Reload];


#
# Routines
#

Option "Routines" = "Off" { RoutinesExcludeEntity: function,procedure; };
Option "Routines" [Default] = "On"  {};
Option "Routines" [Hidden, Reload];


#
# Spacing
#

FontSize:   10;
DrawArrowLength:  6;
DrawArrowLine:    4;
DrawArrowWidth:   3;
DrawBorder:   7;
DrawDouble:   2;
DrawHex:    4;
DrawNodex:    3;
DrawNodey:    3;
DrawOct:    6;
DrawOffset:   4;
DrawPara:   4;
DrawRegionTitleY: 4;

Option "Spacing" = "Compact" {
       DrawRow:    6;
       DrawSeg1:   2;
       DrawSeg2:   0;
       DrawSeg3:   4;
       DrawSib:    2;
       DrawNonsib: 4;
};
Option "Spacing" = "Small" {
       DrawRow:    20;
       DrawSeg1:   5;
       DrawSeg2:   0;
       DrawSeg3:   10;
       DrawSib:    3;
       DrawNonsib: 6;
};
Option "Spacing" [Default] = "Normal" {
       DrawRow:    40;
       DrawSeg1:   8;
       DrawSeg2:   20;
       DrawSeg3:   16;
       DrawSib:    4;
       DrawNonsib: 8;
};
Option "Spacing" = "Wide" {
       DrawRow:    80;
       DrawSeg1:   10;
       DrawSeg2:   50;
       DrawSeg3:   16;
       DrawSib:    6;
       DrawNonsib: 12;
};
Option "Spacing" = "Extra Wide" {
       DrawRow:    160;
       DrawSeg1:   16;
       DrawSeg2:   100;
       DrawSeg3:   20;
       DrawSib:    6;
       DrawNonsib: 12;
};
Option "Spacing" [Global, Relayout];


#
# Sql
#

Option "Sql" = "Off" { SqlExcludeEntity: sql; };
Option "Sql" [Default] = "On"  {};
Option "Sql" [Hidden, Reload];


#
# Sort
#

Option "Sort" [Default] = "Off"   { Sort: false; }
Option "Sort"           = "On"    { Sort: true; };
Option "Sort" [Hidden, Relayout];


#
# Static
#

Option "Static" = "Off";
Option "Static" [Default] = "On";
Option "Static" [Hidden,Reload];


#
# Text option
#

Option "Text" = "No Truncate" {
  NameLength:   30;
  NameMaxLength:    0;
  NameLongpolicy:   wrap;
  NameWraptolerance:  20;
};
Option "Text" = "Truncate Short" {
  NameLength:   10;
  NameLongpolicy:   truncate;
};
Option "Text" = "Truncate Medium" {
  NameLength:   20;
  NameLongpolicy:   truncate;
};
Option "Text" = "Truncate Long" {
  NameLength:   30;
  NameLongpolicy:   truncate;
};
Option "Text" = "No Wrap" {
  NameLength:   250;
  NameMaxLength:    250;
  NameLongpolicy:   wrap;
  NameWraptolerance:  20;
};
Option "Text" = "Wrap Short" {
  NameLength:   10;
  NameMaxLength:    100;
  NameLongpolicy:   wrap;
  NameWraptolerance:  8;
};
Option "Text" = "Wrap Medium" {
  NameLength:   20;
  NameMaxLength:    100;
  NameLongpolicy:   wrap;
  NameWraptolerance:  15;
};
Option "Text" [Default] = "Wrap Long" {
  NameLength:   30;
  NameMaxLength:    100;
  NameLongpolicy:   wrap;
  NameWraptolerance:  20;
};
Option "Text" [Global, Relayout];


#
# Types
#

Option "Types"           = "Off"  { TypesExcludeEntity: type; };
Option "Types" [Default] = "On"   {};
Option "Types" [Hidden, Reload];


#
# Typetext Option
#

Option "Typetext" = "Off" {
       Name: class ~unnamed   = "class [name]";
       Name: delegate         = "delegate [name]";
       Name: enum ~unnamed    = "enum [name]";
       Name: interface        = "interface [name]";
       Name: struct ~unnamed  = "struct [name]";
       Name: union ~unnamed   = "union [name]";
       Name: typedef ~unnamed = "typedef [name]";
       Name: "[name]";
};
Option "Typetext" [Default] = "On" {
       Name: class ~unnamed   = "class [name]";
       Name: delegate         = "delegate [name]";
       Name: enum ~unnamed    = "enum [name]";
       Name: interface        = "interface [name]";
       Name: struct ~unnamed  = "struct [name]";
       Name: union ~unnamed   = "union [name]";
       Name: typedef ~unnamed = "typedef [type] [name]";
       Name: macro            = "[name] = [type]";
       Name: fortran, pascal  = "[name] = [type]";
       Name: "[type] [name]";
};
Option "Typetext" [Hidden, Relayout];


#
# Unresolved
#

Option "Unresolved" = "Off" { UnresolvedExcludeEntity: unresolved, unknown; };
Option "Unresolved" [Default] = "On"  {};
Option "Unresolved" [Hidden, Reload];

Option "Unknown" = "Off" { UnresolvedExcludeEntity: unresolved, unknown; };
Option "Unknown" [Default] = "On"  {};
Option "Unknown" [Hidden, Reload];


#
# Uses
#

Option "Uses" = "Direct";
Option "Uses" [Default] = "Direct and nested subprograms" { SkipRelation: fortran define; };
Option "Uses" [Hidden, Reload];


#
# Variables
#

Option "Variables" = "Off" { VariablesExcludeEntity: variable; };
Option "Variables" [Default] = "On"  {};
Option "Variables" [Hidden, Reload];


#
# Withs
#

Option "Withs" = "Off";
Option "Withs" [Default] = "On";
Option "Withs" [Hidden,Reload];



#
# Withed by
#

Option "Withed by" = "Off";
Option "Withed by" [Default] = "On";
Option "Withed by" [Hidden,Reload];



#
# VIEWS
#

#
# Base Classes
#

Tree View "Base Classes" {
  Title: "Base Classes: [name]";
  Orientation: BottomToTop;
  ArrowDir: up;
  StartEntity: c class, c struct, c union;
  Entity: class,struct,union;
  Relation: base;

  Option "Name" = "Shortname" { Name: "[name]"; };
  Option "Name" [Default] = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout" [Default] = "Crossing";
  Option "Level";
  Option "Sort";
};


Tree View "Base Classes" {
  Title: "Base Classes: [name]";
  Orientation: BottomToTop;
  ArrowDir: up;
  StartEntity: csharp class, csharp struct;
  Entity: class,struct;
  Relation: base;

  Option "Name" = "Shortname" { Name: "[name]"; };
  Option "Name" [Default] = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout" [Default] = "Crossing";
  Option "Level";
  Option "Sort";
};

Tree View "Base Classes" {
  Title: "Base Classes: [name]";
  Orientation: BottomToTop;
  ArrowDir: up;
  StartEntity: web php class, web php interface, web javascript class;
  Entity: web php class,web php interface, web javascript class;
  Relation: extend;

  Option "Name" = "Shortname" { Name: "[name]"; };
  Option "Name" [Default] = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout" [Default] = "Crossing";
  Option "Level";
  Option "Sort";
};



#
# Called By
#

Tree View "Called By" {
  Title: "Called By: [name]";
  Orientation: BottomToTop;
  StartEntity: ada entry, ada function, ada object, ada procedure, ada protected;
  Entity:
    ada entry, ada function, ada package, ada procedure, ada protected, ada task,
    c function,
    cobol program,
    csharp method,
    fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
    java method,
    jovial file, jovial subroutine,
    pascal compunit, pascal function, pascal procedure,
    vhdl architecture, vhdl function, vhdl procedure, vhdl process;
  Relation:
    ada callby,
    c callby ~inactive, c useby ptr,
    cobol callby,
    csharp callby, csharp useby ptr,
    fortran callby,
    java callby,
    jovial callby, jovial asm useby,
    pascal callby,
    vhdl callby;
  SkipRelation: ada instance copy;
  VirtualCallby: true;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Operators";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter;
      Relation: declare;
      Name: "[name] : [type]";
    };
  };
  Option "Sort";
};

Tree View "Called By" {
  Title: "Called By: [name]";
  Orientation: BottomToTop;
  StartEntity: assembly macro, assembly symbol;
  Entity:
    ada entry, ada function, ada package, ada procedure, ada protected, ada task,
    assembly file,
    c function,
    cobol paragraph, cobol program,
    csharp method,
    fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
    java method,
    jovial file, jovial subroutine,
    pascal compunit, pascal function, pascal procedure,
    python class, python file, python function,
    vhdl architecture, vhdl function, vhdl procedure, vhdl process;
  Relation:
    ada callby,
    assembly callby,
    c callby ~inactive, c useby ptr,
    cobol callby, cobol performby, cobol gotoby,
    csharp callby, csharp useby ptr,
    fortran callby,
    java callby,
    jovial callby, jovial asm useby,
    pascal callby,
    python callby,
    vhdl callby;
  VirtualCallby: true;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Name";
  Option "Comments";

  Option "Sort";
  Option "Unresolved";
};


Tree View "Called By" {
  Title: "Called By: [name]";
  Orientation: BottomToTop;
  StartEntity: c function, c object;
  Entity:
    ada entry, ada function, ada package, ada procedure, ada protected, ada task,
    c function,
    cobol program,
    csharp method,
    fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
    java method,
    jovial file, jovial subroutine,
    pascal compunit, pascal function, pascal procedure,
    vhdl architecture, vhdl function, vhdl procedure, vhdl process;
  Relation:
    ada callby,
    c callby ~inactive, c useby ptr,
    cobol callby,
    csharp callby, csharp useby ptr,
    fortran callby,
    java callby,
    jovial callby, jovial asm useby,
    pascal callby,
    vhdl callby;
  VirtualCallby: true;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name" = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Function Pointer";
  Option "Layout";
  Option "Level";
  Option "Sort";
  Option "Unresolved";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter;
      Relation: define;
      Name: "  [type] [name]";
    }
  };
};


Tree View "Called By" {
  Title: "Called By: [name]";
  Orientation: BottomToTop;
  StartEntity: cobol program;
  Entity:
    ada entry, ada function, ada package, ada procedure, ada protected, ada task,
    c function,
    cobol program,
    csharp method,
    fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
    java method,
    jovial file, jovial subroutine,
    pascal compunit, pascal function, pascal procedure,
    vhdl architecture, vhdl function, vhdl procedure, vhdl process;
  Relation:
    ada callby,
    c callby ~inactive, c useby ptr,
    cobol callby,
    csharp callby, csharp useby ptr,
    fortran callby,
    java callby,
    jovial callby, jovial asm useby,
    pascal callby,
    vhdl callby;
  VirtualCallby: true;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Name";
  Option "Sort";
  Option "Unresolved";
  Option "Comments";
};


Tree View "Called By" {
  Title: "Called By: [name]";
  Orientation: BottomToTop;
  StartEntity: csharp method;
  Entity:
    ada entry, ada function, ada package, ada procedure, ada protected, ada task,
    c function,
    cobol program,
    csharp method,
    fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
    java method,
    jovial file, jovial subroutine,
    pascal compunit, pascal function, pascal procedure,
    vhdl architecture, vhdl function, vhdl procedure, vhdl process;
  Relation:
    ada callby,
    c callby ~inactive, c useby ptr,
    cobol callby,
    csharp callby, csharp useby ptr,
    fortran callby,
    java callby,
    jovial callby, jovial asm useby,
    pascal callby,
    vhdl callby;
  VirtualCallby: true;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name" = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Function Pointer";
  Option "Layout";
  Option "Level";
  Option "Sort";
  Option "Unresolved";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter;
      Relation: define;
      Name: "  [type] [name]";
    }
  };
};


Tree View "Called By" {
  Title: "Called By: [name]";
  Orientation: BottomToTop;
  StartEntity: fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine;
  Entity:
    ada entry, ada function, ada package, ada procedure, ada protected, ada task,
    c function,
    cobol program,
    csharp method,
    fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
    java method,
    jovial file, jovial subroutine,
    pascal compunit, pascal function, pascal procedure,
    vhdl architecture, vhdl function, vhdl procedure, vhdl process;
  Relation:
    ada callby,
    c callby ~inactive, c useby ptr,
    cobol callby,
    csharp callby, csharp useby ptr,
    fortran callby,
    java callby,
    jovial callby, jovial asm useby,
    pascal callby,
    vhdl callby;
  VirtualCallby: true;

  Option "Duplicate Subtrees";
  Option "Function Pointer";
  Option "Layout";
  Option "Level";
  Option "Intrinsic";
  Option "Name";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: fortran dummy argument;
      Relation: define;
      Name: "  [name] = [type]";
    };
  };

  Option "Sort";
  Option "Unresolved";
};


Tree View "Called By" {
  Title: "Called By: [name]";
  Orientation: BottomToTop;
  StartEntity: java method;
  Entity:
    ada entry, ada function, ada package, ada procedure, ada protected, ada task,
    c function,
    cobol program,
    csharp method,
    fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
    java method,
    jovial file, jovial subroutine,
    pascal compunit, pascal function, pascal procedure,
    vhdl architecture, vhdl function, vhdl procedure, vhdl process;
  Relation:
    ada callby,
    c callby ~inactive, c useby ptr,
    cobol callby,
    csharp callby, csharp useby ptr,
    fortran callby,
    java callby,
    jovial callby, jovial asm useby,
    pascal callby,
    vhdl callby;
  VirtualCallby: true;

  Option "Name" [Default] = "Shortname" {
    Title: "Callby: [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname"  {
    Title: "Callby: [fullname]";
    Name: "[fullname]";
  };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout";
  Option "Level";
  Option "Unresolved";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter ~catch;
      Relation: define;
      Name: "  [type] [name]";
    };
  };
  Option "Sort";
};


Tree View "Called By" {
  Title: "Called By: [name]";
  Orientation:  BottomToTop;
  StartEntity: jovial subroutine;
  Entity:
    ada entry, ada function, ada package, ada procedure, ada protected, ada task,
    c function,
    cobol program,
    csharp method,
    fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
    java method,
    jovial file, jovial subroutine,
    pascal compunit, pascal function, pascal procedure,
    vhdl architecture, vhdl function, vhdl procedure, vhdl process;
  Relation:
    ada callby,
    c callby ~inactive, c useby ptr,
    cobol callby,
    csharp callby, csharp useby ptr,
    fortran callby,
    java callby,
    jovial callby, jovial asm useby,
    pascal callby,
    vhdl callby;
  VirtualCallby: true;

  Option "Name" [Default] = "Shortname" {
    Title: "Called By: [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname"  {
    Title: "Called By: [fullname]";
    Name: "[fullname]";
  };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout";
  Option "Level";
  Option "Unresolved";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter;
      Relation: define;
      Name: "  [name] [type]";
    };
  };
  Option "Sort";
};


Tree View "Called By" {
  Title: "Called By: [name]";
  Orientation: BottomToTop;
  StartEntity: pascal function, pascal procedure, pascal sql statement;
  Entity:
    ada entry, ada function, ada package, ada procedure, ada protected, ada task,
    c function,
    cobol program,
    csharp method,
    fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
    java method,
    jovial file, jovial subroutine,
    pascal compunit, pascal function, pascal procedure,
    vhdl architecture, vhdl function, vhdl procedure, vhdl process;
  Relation:
    ada callby,
    c callby ~inactive, c useby ptr,
    cobol callby,
    csharp callby, csharp useby ptr,
    fortran callby,
    java callby,
    jovial callby, jovial asm useby,
    pascal callby,
    vhdl callby;
  VirtualCallby: true;
  SkipRelation: pascal overload;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Name";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: pascal parameter;
      Relation: define;
      Name: "  [name] : [type]";
    };
  };

  Option "Sort";
  Option "Unresolved";
};


Tree View "Called By" {
  Title:  "Called By: [name]";
  StartEntity:  plm procedure;
  Entity: procedure;
  Relation: callby;
  Orientation:  BottomToTop;

  Option "Name" [Default] = "Shortname" {
    Title: "Called By: [name]";
    Name:  "[name]";
  };
  Option "Name" = "Fullname"  {
    Title: "Called By: [fullname]";
    Name:  "[fullname]";
  };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout";
  Option "Level";
  Option "Unresolved";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter;
      Relation: declare;
      Name: "  [name] [type]";
    };
  };
  Option "Sort";
};


Tree View "Called By" {
  Title: "Called By: [name]";
  Orientation: BottomToTop;
  StartEntity: python class, python function, python parameter, python variable;
  Entity:
    ada entry, ada function, ada package, ada procedure, ada protected, ada task,
    c function,
    cobol paragraph, cobol program,
    csharp method,
    fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
    java method,
    jovial file, jovial subroutine,
    pascal compunit, pascal function, pascal procedure,
    python class, python file, python function,
    vhdl architecture, vhdl function, vhdl procedure, vhdl process;
  Relation:
    ada callby,
    c callby ~inactive, c useby ptr,
    cobol callby, cobol performby, cobol gotoby,
    csharp callby, csharp useby ptr,
    fortran callby,
    java callby,
    jovial callby, jovial asm useby,
    pascal callby,
    python callby,
    vhdl callby;
  VirtualCallby: true;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Name";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: python parameter;
      Relation: define;
      Name: "  [name] : [type]";
    };
  };

  Option "Sort";
  Option "Unresolved";
};


Tree View "Called By" {
  Title: "Called By: [name]";
  Orientation: BottomToTop;
  StartEntity: vhdl function, vhdl procedure;
  Entity:
    ada entry, ada function, ada package, ada procedure, ada protected, ada task,
    c function,
    cobol program,
    csharp method,
    fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
    java method,
    jovial file, jovial subroutine,
    pascal compunit, pascal function, pascal procedure,
    vhdl architecture, vhdl function, vhdl procedure, vhdl process;
  Relation:
    ada callby,
    c callby ~inactive, c useby ptr,
    cobol callby,
    csharp callby, csharp useby ptr,
    fortran callby,
    java callby,
    jovial callby, jovial asm useby,
    pascal callby,
    vhdl callby;
  VirtualCallby: true;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Name";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: vhdl parameter;
      Relation: declare;
      Name: "  [name] : [type]";
    };
  };

  Option "Sort";
  Option "Unresolved";
};


Tree View "Called By" {
  Title: "Called By: [name]";
  Orientation: BottomToTop;
  StartEntity: web function, web property, web variable;
  Entity:
    web file, web function, web property, web variable;
  Relation:
    web callby,javascript settoby;

  Option "Name" [Default] = "Shortname" {
    Title: "Callby: [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname"  {
    Title: "Callby: [fullname]";
    Name: "[fullname]";
  };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout";
  Option "Level";
  Option "Unresolved";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter ~catch;
      Relation: define;
      Name: "  [type] [name]";
    };
  };
  Option "Sort";
};



#
# Calls
#

Tree View "Calls" {
  Title: "Calls: [name]";
  Orientation: TopToBottom;
  StartEntity: ada entry,ada function,ada package,ada procedure,ada protected,ada task;
  StartRelation: call;
  Entity:
    ada entry, ada function, ada object, ada procedure, ada protected,
    c function, c object,
    cobol program,
    csharp method,
    fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
    java method,
    jovial subroutine,
    pascal function, pascal procedure, pascal sql statement,
    vhdl function, vhdl procedure;
  Relation:
    ada call ~dispatch,
    c call ~inactive ~virtual, c use ptr,
    cobol call,
    csharp call ~virtual, csharp use ptr,
    fortran call,
    java call nondynamic,
    jovial call, jovial asm use,
    pascal call ~virtual,
    vhdl call;
  SkipRelation: ada declare;
  SkipEntity: ada entry;
  SkipRelation2: ada instanceof copy;
  VirtualCall: true;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Operators";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter;
      Relation: declare;
      Name: "[name] : [type]";
    };
  };
  Option "Sort";
};


Tree View "Calls" {
  Title: "Calls: [name]";
  Orientation: TopToBottom;
  StartEntity: assembly file;
  StartRelation: call;
  Entity:
    ada entry, ada function, ada object, ada procedure, ada protected,
    assembly file, assembly macro, assembly symbol,
    c function, c object,
    cobol paragraph, cobol program,
    csharp method,
    fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
    java method,
    jovial subroutine,
    pascal function, pascal procedure, pascal sql statement,
    python class, python file, python function, python parameter, python variable,
    vhdl function, vhdl procedure;
  Relation:
    ada call ~dispatch,
    assembly call,
    c call ~inactive ~virtual, c use ptr,
    cobol call, cobol perform, cobol goto,
    csharp call ~virtual, csharp use ptr,
    fortran call,
    java call nondynamic,
    jovial call, jovial asm use,
    pascal call ~virtual,
    python call,
    vhdl call;
  VirtualCall: true;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Name";
  Option "Comments";

  Option "Sort";
  Option "Unresolved";
};



Tree View "Calls" {
  Title: "Calls: [name]";
  Orientation: TopToBottom;
  StartEntity: c function;
  StartRelation: c call ~inactive,use ptr;
  Entity:
    ada entry, ada function, ada object, ada procedure, ada protected,
    c function, c object,
    cobol program,
    csharp method,
    fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
    java method,
    jovial subroutine,
    pascal function, pascal procedure, pascal sql statement,
    vhdl function, vhdl procedure;
  Relation:
    ada call ~dispatch,
    c call ~inactive ~virtual, c use ptr,
    cobol call,
    csharp call ~virtual, csharp use ptr,
    fortran call,
    java call nondynamic,
    jovial call, jovial asm use,
    pascal call ~virtual,
    vhdl call;
  VirtualCall: true;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name"           = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Function Pointer";
  Option "Layout";
  Option "Level";
  Option "Sort";
  Option "Unresolved";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter;
      Relation: define;
      Name: "  [type] [name]";
    }
  };
};


Tree View "Calls" {
  Title: "Calls: [name]";
  Orientation: TopToBottom;
  StartEntity: cobol program;
  StartRelation: cobol call;
  Entity:
    ada entry, ada function, ada object, ada procedure, ada protected,
    c function, c object,
    cobol program,
    csharp method,
    fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
    java method,
    jovial subroutine,
    pascal function, pascal procedure, pascal sql statement,
    vhdl function, vhdl procedure;
  Relation:
    ada call ~dispatch,
    c call ~inactive ~virtual, c use ptr,
    cobol call,
    csharp call ~virtual, csharp use ptr,
    fortran call,
    java call nondynamic,
    jovial call, jovial asm use,
    pascal call ~virtual,
    vhdl call;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Name";
  Option "Sort";
  Option "Unresolved";
  Option "Comments";
};


Tree View "Calls" {
  Title: "Calls: [name]";
  Orientation: TopToBottom;
  StartEntity: csharp method;
  StartRelation: csharp call,use ptr;
  Entity:
    ada entry, ada function, ada object, ada procedure, ada protected,
    c function, c object,
    cobol program,
    csharp method,
    fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
    java method,
    jovial subroutine,
    pascal function, pascal procedure, pascal sql statement,
    vhdl function, vhdl procedure;
  Relation:
    ada call ~dispatch,
    c call ~inactive ~virtual, c use ptr,
    cobol call,
    csharp call ~virtual, csharp use ptr,
    fortran call,
    java call nondynamic,
    jovial call, jovial asm use,
    pascal call ~virtual,
    vhdl call;
  VirtualCall: true;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name"           = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Function Pointer";
  Option "Layout";
  Option "Level";
  Option "Sort";
  Option "Unresolved";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter;
      Relation: define;
      Name: "  [type] [name]";
    }
  };
};


Tree View "Calls" {
  Title: "Calls: [name]";
  Orientation: TopToBottom;
  StartEntity: fortran block data, fortran function, fortran interface, fortran program, fortran subroutine;
  Entity:
    ada entry, ada function, ada object, ada procedure, ada protected,
    c function, c object,
    cobol program,
    csharp method,
    fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
    java method,
    jovial subroutine,
    pascal function, pascal procedure, pascal sql statement,
    vhdl function, vhdl procedure;
  Relation:
    ada call ~dispatch,
    c call ~inactive ~virtual, c use ptr,
    cobol call,
    csharp call ~virtual, csharp use ptr,
    fortran call,
    java call nondynamic,
    jovial call, jovial asm use,
    pascal call ~virtual,
    vhdl call;
  VirtualCall: true;

  Option "Duplicate Subtrees";
  Option "Function Pointer";
  Option "Layout";
  Option "Level";
  Option "Intrinsic";
  Option "Name";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: fortran dummy argument;
      Relation: define;
      Name: "  [name] = [type]";
    };
  };

  Option "Sort";
  Option "Unresolved";
  Option "Comments";
};


Tree View "Calls" {
  Title: "Calls: [name]";
  Orientation: TopToBottom;
  StartEntity: java method;
  StartRelation: java call;
  Entity:
    ada entry, ada function, ada object, ada procedure, ada protected,
    c function, c object,
    cobol program,
    csharp method,
    fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
    java method,
    jovial subroutine,
    pascal function, pascal procedure, pascal sql statement,
    vhdl function, vhdl procedure;
  Relation:
    ada call ~dispatch,
    c call ~inactive ~virtual, c use ptr,
    cobol call,
    csharp call ~virtual, csharp use ptr,
    fortran call,
    java call nondynamic,
    jovial call, jovial asm use,
    pascal call ~virtual,
    vhdl call;
  VirtualCall: true;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name"           = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout";
  Option "Level";
  Option "Unresolved";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter ~catch;
      Relation: define;
      Name: "  [type] [name]";
    };
  };
  Option "Sort";
};


Tree View "Calls" {
  Title: "Calls: [name]";
  Orientation: TopToBottom;
  StartEntity: jovial file, jovial subroutine;
  Entity:
    ada entry, ada function, ada object, ada procedure, ada protected,
    c function, c object,
    cobol program,
    csharp method,
    fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
    java method,
    jovial subroutine,
    pascal function, pascal procedure, pascal sql statement,
    vhdl function, vhdl procedure;
  Relation:
    ada call ~dispatch,
    c call ~inactive ~virtual, c use ptr,
    cobol call,
    csharp call ~virtual, csharp use ptr,
    fortran call,
    java call nondynamic,
    jovial call, jovial asm use,
    pascal call ~virtual,
    vhdl call;
  VirtualCall: true;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name"           = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout";
  Option "Level";
  Option "Unresolved";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter;
      Relation: define;
      Name: "  [name] [type]";
    };
  };
  Option "Sort";
};


Tree View "Calls" {
  Title: "Calls: [name]";
  Orientation: TopToBottom;
  StartEntity: pascal function, pascal procedure, pascal compunit;
  StartRelation: call;
  Entity:
    ada entry, ada function, ada object, ada procedure, ada protected,
    c function, c object,
    cobol program,
    csharp method,
    fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
    java method,
    jovial subroutine,
    pascal function, pascal procedure, pascal sql statement,
    vhdl function, vhdl procedure;
  Relation:
    ada call ~dispatch,
    c call ~inactive ~virtual, c use ptr,
    cobol call,
    csharp call ~virtual, csharp use ptr,
    fortran call,
    java call nondynamic,
    jovial call, jovial asm use,
    pascal call ~virtual,
    vhdl call;
  SkipRelation: pascal overload;
  VirtualCall: true;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Name";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: pascal parameter;
      Relation: define;
      Name: "  [name] : [type]";
    };
  };

  Option "Sort";
  Option "Sql";
  Option "Unresolved";
};


Tree View "Calls" {
  Title:  "Calls: [name]";
  StartEntity:  plm procedure;
  Entity: procedure;
  Relation: call;
  Orientation:  TopToBottom;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name"           = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout";
  Option "Level";
  Option "Unresolved";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter;
      Relation: declare;
      Name: "  [name] [type]";
    }
  }
  Option "Sort";
  Option "Comments";
};

Tree View "Calls" {
  Title: "Calls: [name]";
  Orientation: TopToBottom;
  StartEntity: python class, python file, python function;
  StartRelation: call;
  Entity:
    ada entry, ada function, ada object, ada procedure, ada protected,
    c function, c object,
    cobol paragraph, cobol program,
    csharp method,
    fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
    java method,
    jovial subroutine,
    pascal function, pascal procedure, pascal sql statement,
    python class, python file, python function, python parameter, python variable,
    vhdl function, vhdl procedure;
  Relation:
    ada call ~dispatch,
    c call ~inactive ~virtual, c use ptr,
    cobol call, cobol perform, cobol goto,
    csharp call ~virtual, csharp use ptr,
    fortran call,
    java call nondynamic,
    jovial call, jovial asm use,
    pascal call ~virtual,
    python call,
    vhdl call;
  VirtualCall: true;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Name";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: python parameter;
      Relation: define;
      Name: "  [name] : [type]";
    };
  };

  Option "Sort";
  Option "Unresolved";
};


Tree View "Calls" {
  Title: "Calls: [name]";
  Orientation: TopToBottom;
  StartEntity: vhdl architecture, vhdl function, vhdl process, vhdl procedure;
  StartRelation: call;
  Entity:
    ada entry, ada function, ada object, ada procedure, ada protected,
    c function, c object,
    cobol program,
    csharp method,
    fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
    java method,
    jovial subroutine,
    pascal function, pascal procedure, pascal sql statement,
    vhdl function, vhdl procedure;
  Relation:
    ada call ~dispatch,
    c call ~inactive ~virtual, c use ptr,
    cobol call,
    csharp call ~virtual, csharp use ptr,
    fortran call,
    java call nondynamic,
    jovial call, jovial asm use,
    pascal call ~virtual,
    vhdl call;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Name";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: vhdl parameter;
      Relation: declare;
      Name: "  [name] : [type]";
    };
  };

  Option "Sort";
  Option "Unresolved";
};

Tree View "Calls" {
  Title: "Calls: [name]";
  Orientation: TopToBottom;
  StartEntity: web file, web function;
  StartRelation: web call, javascript setto;
  Entity:
    web function, web property, web variable;
  Relation:
    web call,javascript setto;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name"           = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout";
  Option "Level";
  Option "Unresolved";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter;
      Relation: define;
      Name: "  [type] [name]";
    };
  };
  Option "Sort";
};


#
# Child Lib Units
#

Tree View "Child Lib Units" {
  Title: "Child Lib Units: [name]";
  Orientation: TopToBottom;
  StartEntity: ada package;
  Entity: package,function,procedure;
  Relation: child libunit;

  Option "Layout";
  Option "Level";
  Option "Sort";
};



#
# Contains
#

Decl View "Contains" {
  Title: "Package [name] Contains";
  StartEntity: java package;

  Subview UpperLeft {
    Entity: java;
    Relation: contain;
    Position: overLine;
  }
};


#
# Data Components
#

Tree View "Data Components" {
  Orientation: TopToBottom;
  StartEntity: ada record type;
  Entity: component, record type, array type;
  Title: "Data Components: [name]";
  Relation: declare,typed;
  SkipRelation: derivefrom;

  Option "Name" [Default] = "Shortname and type" {
    Name: "[name]: [type]";
  };
  Option "Name" = "Fullname and type" {
    Name: "[fullname]: [type]";
  };
  Option "Name" = "Shortname" {
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    Name: "[fullname]";
  };

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Sort";
  Option "Unresolved";
};



#
# Data Members
#

Tree View "Data Members" {
  Title: "Data Members: [name]";
  Orientation: TopToBottom;
  StartEntity: c typedef, c object, c parameter, c class, c struct, c union;
  Entity: member ~function ~type;
  Relation: declare,define,typed;
  SkipEntity: type;
  SkipRelation: typed;
  SkipRelation2: base;

  Option "Name" [Default]  = "Shortname and type" {
    Name: class ~unnamed   = "class [name]";
    Name: enum ~unnamed    = "enum [name]";
    Name: struct ~unnamed  = "struct [name]";
    Name: union ~unnamed   = "union [name]";
    Name: typedef ~unnamed = "typedef [name]";
    Name: object           = "[type] [name]";
  };
  Option "Name" = "Fullname and type" {
    Name: class ~unnamed   = "class [fullname]";
    Name: enum ~unnamed    = "enum [fullname]";
    Name: struct ~unnamed  = "struct [fullname]";
    Name: union ~unnamed   = "union [fullname]";
    Name: typedef ~unnamed = "typedef [type] [fullname]";
    Name: object           = "[type] [fullname]";
  };
  Option "Name" = "Shortname" { Name: "[name]"; };
  Option "Name" = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout";
  Option "Level";
  Option "Sort";
  Option "Unresolved";
  Option "Comments";
};


Tree View "Data Members" {
  Title: "Data Members: [name]";
  Orientation: TopToBottom;
  StartEntity: csharp variable, csharp const, csharp field, csharp parameter, csharp class, csharp struct;
  Entity: field;
  Relation: declare,define,typed;
  SkipEntity: type;
  SkipRelation: typed;
  SkipRelation2: base;

  Option "Name" [Default]        = "Shortname and type" {
    Name: class      = "class [name]";
    Name: enum       = "enum [name]";
    Name: struct     = "struct [name]";
    Name: const,field,variable   = "[type] [name]";
  };
  Option "Name" = "Fullname and type" {
    Name: class            = "class [fullname]";
    Name: enum                   = "enum [fullname]";
    Name: struct                 = "struct [fullname]";
    Name: const,field,variable   = "[type] [fullname]";
  };
  Option "Name" = "Shortname" { Name: "[name]"; };
  Option "Name" = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout";
  Option "Level";
  Option "Sort";
  Option "Unresolved";
  Option "Comments";
};


Tree View "Data Members" {
  Title: "Data Members: [name]";
  Orientation: TopToBottom;
  StartEntity: fortran type;
  Entity: variable, procedure pointer;
  Relation: define;
  SkipEntity: type;
  SkipRelation: typed;
  SkipRelation2: extend;

  Option "Name" [Default] = "Shortname" {Name: "[name]"; };
  Option "Name" = "Fullname" { Name: "[fullname]"; };
  Option "Name" = "Name and type" {
    Name: type     = "[name]";
    Name: variable = "[type] [name]";
  };

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Sort";
  Option "Comments";
};



#
# Declaration
#

Decl View "Declaration" {
  Title: "Declaration: [kind] [name]";
  StartEntity: ada package, ada function, ada procedure, ada protected,
         ada enumeration type, ada record type, ada task, ada entry;
  Option "Name" [Default] = "Shortname" {
    DeclName: function  = "[kind]\n   [name]\n\nreturns:\n   [type]";
    DeclName:             "[kind]\n   [name]";
  };
  Option "Name" = "Fullname" {
    DeclName: function  = "[kind]\n   [fullname]\n\nreturns:\n   [type]";
    DeclName:             "[kind]\n   [fullname]";
  };

  Option "Called By" [Default,reload] {
    Subview OuterLeft {
      Title: "Called By:";
      Direction: in;
      Entity:
        ada entry, ada function, ada package, ada procedure, ada protected, ada task,
        c function,
        csharp method,
        fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
        java method,
        jovial file, jovial subroutine,
        pascal compunit, pascal function, pascal procedure,
        vhdl architecture, vhdl function, vhdl process, vhdl procedure;
      Relation:
        ada callby,
        c callby ~inactive, c useby ptr,
        csharp callby, csharp useby ptr,
        fortran callby,
        java callby,
        jovial callby, jovial asm useby,
        pascal callby,
        vhdl callby;
      LocalExcludeEntity: "";
    };
  };

  Option "Calls" [Default,reload] {
    Subview OuterRight {
      Title: "Calls:";
      Direction: out;
      Entity:
        ada entry, ada function, ada object, ada procedure, ada protected,
        c function, c object,
        csharp method,
        fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
        java method,
        jovial subroutine,
        pascal function, pascal procedure, pascal sql statement,
        vhdl function, vhdl procedure;
      Relation:
        ada call,
        c call ~inactive, c use ptr,
        csharp call, csharp use ptr,
        fortran call,
        java call ~nondynamic,
        jovial call, jovial asm use,
        pascal call,
        vhdl call;
      LocalExcludeEntity: "";
      SkipEntity: entry;
      SkipRelation: declare;
    };
  };

  Option "Constants";
  Option "Objects";
  Option "Types";
  Option "Local";
  Option "Operators";
  Option "Comments";

  Option "Renames" = "Off" { ExcludeSecondRelation: "ada rename"; };
  Option "Renames" [Default] = "On";
  Option "Renames" [Reload];

  Option "Withed by" [Default,Reload] {
    Subview OuterUpperLeft {
      Title: "Withed by:";
      Entity: package,function,procedure,task,protected;
      Relation: withby,usepackageby,usetypeby;
      Direction: in;
      Arrow : with = Single;
      Arrow : withuse = solidSingle;
      LocalExcludeEntity: "";
    };
  };

  Option "Withs" [Default,Reload] {
    Subview OuterUpperCenter {
      Title: "Withs:";
      Entity: package,function,procedure;
      Relation: with,usepackage,usetype;
      SkipRelation: declare;
      Direction: out;
      Arrow : with = Single;
      Arrow : withuse = solidSingle;
      LocalExcludeEntity: "";
    };
  };

  Option "Parameters" [Default,Reload] = "On" {
    Subview OuterUpperRight {
      Title: "Parameters:";
      Name: "[name] : [type]";
      Entity: parameter;
      Relation: declare;
      Shape: none;
      Direction: in;
      Arrows: none;
      DrawNodex: 0;
      DrawNodey: 2;
      DrawSib: 0;
      LocalExcludeEntity: "";
    };
  };

  Subview UpperLeft {
    Entity: function,procedure,package,task,protected,entry;
    Relation: declare;
    Position: local = insideLine;
    Position: overLine;
    Name: abstract = "[name] (abstract)";
    Name: private = "[name] (private)";
    Name: "[name]";
  };

  Subview UpperRight {
    Entity: type ~task ~protected,constant,exception,object,component,enumeration literal;
    Relation: declare;
    Position: local = insideLine;
    Position: overLine;
    Name: abstract tagged private  = "[name] (private abstract)";
    Name: abstract tagged          = "[name] (abstract)";
    Name: private record           = "[name] (private)";
    Name: record                   = "[name]";
    Name: private enumeration type = "[name] (private)";
    Name: enumeration type         = "[name]";
    Name: private type             = "[name] (private) is [type]";
    Name: type                     = "[name] is [type]";
    Name: constant deferred    = "[name] (deferred) : [type]";
    Name: constant                 = "[name] : [type]";
    Name: exception                = "[name] : [type]";
    Name: object                   = "[name] : [type]";
    Name: component                = "[name] : [type]";
    Name: enumeration literal      = "[name]";
  };
};


#
# DECLARATION: ASSEMBLY FILE
#
Decl View "Declaration" {
  Title: "File Definition: [name]";
  StartEntity: assembly file;
  Main: false;

  Option "Name" [Default] = "Shortname" {
    DeclName: "[kind]\n   [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    DeclName: "[kind]\n   [fullname]";
    Name: "[fullname]";
  };

  Option "Unresolved";
  Option "Comments";

  Option "Included by" [Default, Reload] {
    Subview OuterUpperLeft {
      Title: "Included By Files:";
      Entity: assembly file;
      Relation: Includeby;
      Direction: in;
    }
  }
  Option "Includes Files" [Default, Reload] {
    Subview OuterUpperRight {
      Title: "Includes Files:";
      Entity: assembly file;
      Relation: Include;
      Direction: out;
    }
  }

  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      Title:    "Calls:";
      Entity:   label, macro, function, property, variable;
      Relation:   call;
      Direction:  out;
    }
  }

  Subview UpperLeft {
    Entity: macro;
    Relation: define;
    Position: overline;
  };

  Subview MiddleRight {
    Entity: label, symbol;
    Relation: define;
    Position: overLine;
  };

  Subview MiddleLeft {
    Entity: constant, variable;
    Relation: define;
    Position: overLine;
  }
};


#
# DECLARATION: C NAMESPACE
#
Decl View "Declaration" {
  Title: "Namespace Declaration: [name]";
  StartEntity: c namespace;

  Option "Name" [Default] = "Shortname" {
    DeclName: "[kind]\n   [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    DeclName: "[kind]\n   [fullname]";
    Name: "[fullname]";
  };

  Option "Typetext";
  Option "Unresolved";
  Option "Comments";

  Subview UpperLeft {
    Entity: namespace;
    Relation: declare,define;
    Position: overLine;
  }
  Subview MiddleLeft {
    Entity: function;
    Relation: declare,define;
    Position: static = insideLine;
    Position: overLine;
  }
  Subview LowerLeft {
    Entity:  object;
    Relation: declare,define;
    Position: static = insideLine;
    Position: overLine;
  }
  Subview UpperRight {
    Entity: class, struct;
    Relation: declare,define;
    Position: overLine;
  }
  Subview MiddleRight {
    Entity: type ~class ~struct;
    Relation: declare,define;
    Position: overLine;
  }
};


#
# DECLARATION: C CODE FILE
#
Decl View "Declaration" {
  Title: "File Definition: [name]";
  StartEntity: c code file;
  Main: false;

  Option "Name" [Default] = "Shortname" {
    DeclName: "[kind]\n   [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    DeclName: "[kind]\n   [fullname]";
    Name: "[fullname]";
  };

  Option "Typetext";
  Option "Unresolved";
  Option "Comments";

  Option "Includes" [Default, Reload] {
    Subview OuterUpperRight {
      Title: "Includes:";
      Entity: header file;
      Relation: include ~inactive;
      Direction: out;
    }
  }
  Option "Static" [Default, Reload] {
    Subview UpperLeft {
      Entity: static function;
      Relation: define;
      Position: insideLine;
      OneFileRefOnly: true;
      SkipRelation: c declare;
      SkipEntity: c namespace;
    }
    Subview UpperRight {
      Entity: macro,global static object,type ~unnamed;
      Relation: define;
      Position: insideLine;
      OneFileRefOnly: true;
      SkipRelation: c declare;
      SkipEntity: c namespace;
    }
  }

  Subview MiddleLeft {
    Entity: function ~static;
    Relation: define;
    Position: overLine;
    OneFileRefOnly: true;
    SkipRelation: c declare;
    SkipEntity: c namespace;
  }
  Subview MiddleRight {
    Entity: global ~static object;
    Relation: define;
    Position: overLine;
    OneFileRefOnly: true;
    SkipRelation: c declare;
    SkipEntity: c namespace;
  }
};


#
# DECLARATION: C HEADER FILE
#
Decl View "Declaration" {
  Title: "File Declaration: [name]";
  StartEntity: c header file;
  OneFileRefOnly: true;
  Main: false;

  Option "Name" [Default] = "Shortname" {
    DeclName: "[kind]\n   [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    DeclName: "[kind]\n   [fullname]";
    Name: "[fullname]";
  };

  Option "Typetext";
  Option "Unresolved";
  Option "Comments";

  Option "Included by" [Default, Reload] {
    Subview OuterUpperLeft {
      Title: "Included By:";
      Entity: file;
      Relation: includeby ~inactive;
      Direction: in;
    }
  }

  Option "Includes" [Default, Reload] {
    Subview OuterUpperRight {
      Title: "Includes:";
      Entity: header file;
      Relation: include ~inactive;
      Direction: out;
    }
  }

  Subview UpperLeft {
    Entity: macro,function ~static;
    Relation: define;
    Position: overLine;
    OneFileRefOnly: true;
    SkipRelation: c declare;
    SkipEntity: c namespace;
  }

  Option "External Functions" [Default, Reload] {
    Subview MiddleLeft {
      Entity: function;
      Relation: declare;
      Position: overLine;
      OneFileRefOnly: true;
      SkipRelation: c declare;
      SkipEntity: c namespace;
    }
  }

  Subview UpperRight {
    Entity: object,type ~unnamed;
    Relation: define;
    Position: overLine;
    OneFileRefOnly: true;
    SkipRelation: c declare;
    SkipEntity: c namespace;
  }
};


#
# DECLARATION: C FUNCTION
#
Decl View "Declaration" {
  Title: "Function Definition: [name]";
  StartEntity: c function;
  Main: false;

  Option "Name" [Default] = "Shortname" {
    DeclName: "[name]\n\nreturns:\n   [type]";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    DeclName: "[fullname]\n\nreturns:\n   [type]";
    Name: "[fullname]";
  };

  Option "Filename";
  Option "Function Pointer";
  Option "Unresolved";
  Option "Comments";

  Option "Called by" [Default, Reload] {
    Subview OuterLeft {
      Title: "Called By:";
      Direction: in;
      Entity:
        ada entry, ada function, ada package, ada procedure, ada protected, ada task,
        c function,
        csharp method,
        fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
        java method,
        jovial file, jovial subroutine,
        pascal compunit, pascal function, pascal procedure,
        vhdl architecture, vhdl function, vhdl process, vhdl procedure;
      Relation:
        ada callby,
        c callby ~inactive, c useby ptr,
        csharp callby, csharp useby ptr,
        fortran callby,
        java callby,
        jovial callby, jovial asm useby,
        pascal callby,
        vhdl callby;
    }
  }
  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      Title: "Calls:";
      Direction: out;
      Entity:
        ada entry, ada function, ada object, ada procedure, ada protected,
        c function, c object,
        csharp method,
        fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
        java method,
        jovial subroutine,
        pascal function, pascal procedure, pascal sql statement,
        vhdl function, vhdl procedure;
      Relation:
        ada call,
        c call ~inactive, c use ptr,
        csharp call, csharp use ptr,
        fortran call,
        java call ~nondynamic,
        jovial call, jovial asm use,
        pascal call,
        vhdl call;
    }
  }

  Subview OuterUpperRight {
    Title: "Parameters:";
    Name: "[type] [name]";
    Filename: "";
    Entity: parameter;
    Relation: define;
    Shape: none;
    Direction: in;
    Arrows: none;
    DrawNodex: 0;
    DrawNodey: 2;
    DrawSib: 0;
    PsNodex: 0;
    PsNodey: 2;
    PsSib: 0;
  }
};


#
# DECLARATION: C CLASS
#
Decl View "Declaration" {
  Title: "Class Definition: [name]";
  StartEntity: c type ~unresolved ~typedef ~enum;
  Main: false;

  Option "Name" [Default] = "Shortname" {
    DeclName: "[kind]: [name]\n\ndefined as:\n  [type]";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    DeclName: "[kind]: [fullname]\n\ndefined as:\n  [type]";
    Name: "[fullname]";
  };

  Option "Filename";
  Option "Comments";
  Option "Base Classes" [Default, Reload] {
    Subview OuterUpperLeft {
      Title: "Base Classes:";
      Entity: type;
      Relation: base;
      Direction: out;
    }
  }

  Option "Derived Classes" [Default, Reload] {
    Subview OuterUpperRight {
      Title: "Derived Classes:";
      Entity: type;
      Relation: derive;
      Direction: out;
    }
  }

  Option "Private" [Default, Reload] {
    Subview UpperLeft {
      Title: "Private:";
      Name: "[type] [name]";
      Entity: private member function;
      Relation: define,declare;
      Position: insideLine;
    }
    Subview UpperRight {
      Title: "Private:";
      Name: "[type] [name]";
      Entity: private member ~function ~unnamed;
      Relation: define,declare;
      Position: insideLine;
    }
  }

  Option "Protected" [Default, Reload] {
    Subview MiddleLeft {
      Title: "Protected:";
      Name: "[type] [name]";
      Entity: protected member function;
      Relation: define,declare;
      Position: onLine;
    }
    Subview MiddleRight {
      Title: "Protected:";
      Name: "[type] [name]";
      Entity: protected member ~function ~unnamed;
      Relation: define,declare;
      Position: onLine;
    }
  }

  Option "Public" [Default, Reload] {
    Subview LowerLeft {
      Title: "Public:";
      Name: "[type] [name]";
      Entity: public member function;
      Relation: define,declare;
      Position: overLine;
    }
    Subview LowerRight {
      Title: "Public:";
      Name: "[type] [name]";
      Entity: public member ~function ~unnamed,enumerator;
      Relation: define,declare;
      Position: overLine;
    }
  }
};


#
# DECLARATION: C ENUM
#
Decl View "Declaration" {
  Title: "Enum Definition: [name]";
  StartEntity: c enum;
  Main: false;

  Option "Name" [Default] = "Shortname" {
    DeclName: "[kind]: [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    DeclName: "[kind]: [fullname]";
    Name: "[fullname]";
  };

  Option "Comments";

  Subview UpperLeft {
    Title: "Enumerators:";
    Name: "[name]";
    Entity: enumerator;
    Relation: define,declare;
    Position: overLine;
  }
};


Decl View "Declaration" {
  Title: "File Definition: [name]";
  StartEntity: csharp file;
  Main: false;

  Option "Name" [Default] = "Shortname" {
    DeclName: "[kind]\n   [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    DeclName: "[kind]\n   [fullname]";
    Name: "[fullname]";
  };

  Option "Typetext";
  Option "Unresolved";
  Option "Comments";

  Option "Private" [Default, Reload] {
    Subview UpperRight {
      Title: "Private:";
      Name: "[type] [name]";
      Entity: private type;
      Relation: define,declare;
      Position: insideLine;
    }
  }

  Option "Protected" [Default, Reload] {
    Subview MiddleRight {
      Title: "Protected:";
      Name: "[type] [name]";
      Entity: protected type,internal type;
      Relation: define,declare;
      Position: onLine;
    }
  }

  Option "Public" [Default, Reload] {
    Subview LowerRight {
      Title: "Public:";
      Name: "[type] [name]";
      Entity: public type;
      Relation: define,declare;
      Position: overLine;
    }
  }
};


Decl View "Declaration" {
  Title: "Method Definition: [name]";
  StartEntity: csharp method;
  Main: false;

  Option "Name" [Default] = "Shortname" {
    DeclName: "[name]\n\nreturns:\n   [type]";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    DeclName: "[fullname]\n\nreturns:\n   [type]";
    Name: "[fullname]";
  };

  Option "Filename";
  Option "Function Pointer";
  Option "Unresolved";
  Option "Comments";

  Option "Called by" [Default, Reload] {
    Subview OuterLeft {
      Title: "Called By:";
      Direction: in;
      Entity:
        ada entry, ada function, ada package, ada procedure, ada protected, ada task,
  c function,
  csharp method,
  fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
  java method,
  jovial file, jovial subroutine,
  pascal compunit, pascal function, pascal procedure,
  vhdl architecture, vhdl function, vhdl process, vhdl procedure;
      Relation:
        ada callby,
  c callby ~inactive, c useby ptr,
  csharp callby, csharp useby ptr,
  fortran callby,
  java callby,
  jovial callby, jovial asm useby,
  pascal callby,
  vhdl callby;
    }
  }
  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      Title: "Calls:";
      Direction: out;
      Entity:
        ada entry, ada function, ada object, ada procedure, ada protected,
  c function, c object,
  csharp method,
  fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
  java method,
  jovial subroutine,
  pascal function, pascal procedure, pascal sql statement,
  vhdl function, vhdl procedure;
      Relation:
        ada call,
  c call ~inactive, c use ptr,
  csharp call, csharp use ptr,
  fortran call,
  java call ~nondynamic,
  jovial call, jovial asm use,
  pascal call,
  vhdl call;
    }
  }

  Subview OuterUpperRight {
    Title: "Parameters:";
    Name: "[type] [name]";
    Filename: "";
    Entity: parameter;
    Relation: define;
    Shape: none;
    Direction: in;
    Arrows: none;
    DrawNodex: 0;
    DrawNodey: 2;
    DrawSib: 0;
    PsNodex: 0;
    PsNodey: 2;
    PsSib: 0;
  }
};


Decl View "Declaration" {
  Title: "Class Definition: [name]";
  StartEntity: csharp type ~unresolved ~enum;
  Main: false;

  Option "Name" [Default] = "Shortname" {
    DeclName: "[kind]: [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    DeclName: "[kind]: [fullname]";
    Name: "[fullname]";
  };

  Option "Filename";
  Option "Comments";
  Option "Base Classes" [Default, Reload] {
    Subview OuterUpperLeft {
      Title: "Base Classes:";
      Entity: type;
      Relation: base;
      Direction: out;
    }
  }

  Option "Derived Classes" [Default, Reload] {
    Subview OuterUpperRight {
      Title: "Derived Classes:";
      Entity: type;
      Relation: derive;
      Direction: out;
    }
  }

  Option "Implements" [Default, Reload] {
    Subview OuterLeft {
      Title: "Implements:";
      Entity: interface;
      Relation: implement;
      Direction: out;
    }
  }

  Option "Implemented By" [Default, Reload] {
    Subview OuterRight {
      Title: "Implemented By:";
      Entity: class,struct;
      Relation: implementby;
      Direction: out;
    }
  }

  Option "Private" [Default, Reload] {
    Subview UpperLeft {
      Title: "Private:";
      Name: "[type] [name]";
      Entity: private method;
      Relation: define,declare;
      Position: insideLine;
    }
    Subview UpperRight {
      Title: "Private:";
      Name: "[type] [name]";
      Entity: private field,private type,private indexer,private event,private property;
      Relation: define,declare;
      Position: insideLine;
    }
  }

  Option "Protected" [Default, Reload] {
    Subview MiddleLeft {
      Title: "Protected:";
      Name: "[type] [name]";
      Entity: protected method, internal method;
      Relation: define,declare;
      Position: onLine;
    }
    Subview MiddleRight {
      Title: "Protected:";
      Name: "[type] [name]";
      Entity: protected field,protected type,protected indexer,protected event,protected property,internal field,internal type,internal indexer,internal event,internal property;
      Relation: define,declare;
      Position: onLine;
    }
  }

  Option "Public" [Default, Reload] {
    Subview LowerLeft {
      Title: "Public:";
      Name: "[type] [name]";
      Entity: public method;
      Relation: define,declare;
      Position: overLine;
    }
    Subview LowerRight {
      Title: "Public:";
      Name: "[type] [name]";
      Entity: public field,public type,public indexer,public event,public property,public enumerator;
      Relation: define,declare;
      Position: overLine;
    }
  }
};


Decl View "Declaration" {
  Title: "Enum Definition: [name]";
  StartEntity: csharp enum;
  Main: false;

  Option "Name" [Default] = "Shortname" {
    DeclName: "[kind]: [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    DeclName: "[kind]: [fullname]";
    Name: "[fullname]";
  };
  Option "Comments";

  Subview UpperLeft {
    Title: "Enumerators:";
    Name: "[name]";
    Entity: enumerator;
    Relation: define,declare;
    Position: overLine;
  }
};


Decl View "Declaration" {
  Title: "[kind] Declaration: [name]";
  DeclName: "[name]";
  StartEntity: fortran common, fortran datapool;

  Option "Typetext";
  Option "Comments";

  Subview UpperLeft {
    Entity: fortran variable;
    Relation: fortran contain;
    Position: overLine;
  };
};


Decl View "Declaration" {
  Title: "File Declaration: [name]";
  DeclName: "[kind]\n   [name]";
  StartEntity: fortran file ~unresolved;

  Option "Comments";

  Subview OuterLeft {
    Title: "Included By:";
    Entity: block data, program, function, subroutine;
    Relation: includeby;
    Name: "[name]";
    Direction: in;
  };

  Subview UpperLeft {
    Entity: common, datapool, function, module, program, subroutine;
    Relation: define;
    Position: overLine;
    Name: "[name]";
  };
};


Decl View "Declaration" {
  Title: "[kind] Declaration: [name]";
  DeclName: "[kind] [name]\n\n";
  StartEntity: fortran module;

  Option "Usedby" [Default, Reload] {
    Subview OuterLeft {
      Title: "Used By:";
      Entity: module, block data, program, function, subroutine;
      Relation: moduleuseby;
      Name: "[name]";
      Direction: in;
    };
  };

  Option "Uses" [Default, Reload] {
    Subview OuterRight {
      Title: "Uses:";
      Entity: module;
      Relation: moduleuse;
      Name: "[name]";
      Direction: out;
    };
  };

  Option "Comments";

  Subview UpperLeft {
    Name: "[name]";
    Entity: entry, function, subroutine, variable;
    Relation: define ~private;
    Position: overLine;
  };

  Subview UpperRight {
    Name: "[name]";
    Entity: entry, function, subroutine, variable;
    Relation: define private;
    Position: insideLine;
  };

  Subview MiddleLeft {
    Name: "[name]";
    Entity: type, interface;
    Relation: define ~private;
    Position: overLine;
  };

  Subview MiddleRight {
    Name: "[name]";
    Entity: type, interface;
    Relation: define private;
    Position: insideLine;
  };
};


Decl View "Declaration" {
  Title: "[kind] Declaration: [name]";
  DeclName: "[kind] [name]\n\n";
  StartEntity: fortran interface, fortran type, fortran pointer, fortran common, fortran datapool;

  Option "Comments";

  Subview UpperLeft {
    Name: "[name]";
    Entity: function, subroutine, variable;
    Relation: define ~private;
    Position: overLine;
  };

  Subview UpperRight {
    Name: "[name]";
    Entity: function, subroutine, variable;
    Relation: define private;
    Position: insideLine;
  };

  Subview MiddleLeft {
    Name: "[name]";
    Entity: type, interface;
    Relation: define ~private;
    Position: overLine;
  };

  Subview MiddleRight {
    Name: "[name]";
    Entity: type, interface;
    Relation: define private;
    Position: insideLine;
  };
};


Decl View "Declaration" {
  Title: "[kind] Declaration: [name]";
  StartEntity: fortran program, fortran function, fortran subroutine;
  DeclName: function = "[kind] [name]\n\nreturns:\n   [type]";
  DeclName: program,subroutine = "[kind] [name]\n\n";

  Option "Called by" [Default, Reload] {
    Subview OuterLeft {
      Title: "Called By:";
      Direction: in;
      Entity:
        ada entry, ada function, ada package, ada procedure, ada protected, ada task,
        c function,
        csharp method,
        fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
        java method,
        jovial file, jovial subroutine,
        pascal compunit, pascal function, pascal procedure,
        vhdl architecture, vhdl function, vhdl procedure;
      Relation:
        ada callby,
        c callby ~inactive, c useby ptr,
        csharp callby, csharp useby ptr,
        fortran callby,
        java callby,
        jovial callby, jovial asm useby,
        pascal callby,
        vhdl callby;
    };
  };
  Option "Function Pointer";
  Option "Intrinsic";
  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      Title: "Calls:";
      Direction: out;
      Entity:
        ada entry, ada function, ada object, ada procedure, ada protected,
        c function, c object,
        csharp method,
        fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
        java method,
        jovial subroutine,
        pascal function, pascal procedure, pascal sql statement,
        vhdl function, vhdl procedure;
      Relation:
        ada call,
        c call ~inactive, c use ptr,
        csharp call, csharp use ptr,
        fortran call,
        java call ~nondynamic,
        jovial call, jovial asm use,
        pascal call,
        vhdl call;
    };
  };
  Option "Name";
  Option "Unresolved";
  Option "Comments";

  Subview OuterUpperLeft {
    Title: "Includes:";
    Entity: fortran file;
    Relation: include;
    Name: "[name]";
    Direction: out;
  };

  Option "Uses" [Default, Reload] {
    Subview OuterUpperCenter {
      Title: "Uses:";
      Entity: fortran module;
      Relation: moduleuse;
      Name: "[name]";
      Direction: out;
    };
  };

  Subview OuterUpperRight {
    Title: "Parameters:";
    Name: "[type] [name]";
    Entity: fortran dummy argument;
    Relation: define;
    Shape: none;
    Direction: in;
    Arrows: none;
    DrawNodex: 0;
    DrawNodey: 2;
    DrawSib: 0;
    PsNodex: 0;
    PsNodey: 2;
    PsSib: 0;
  };

  Subview UpperLeft {
    Entity: fortran common, fortran datapool, fortran entry, fortran function, fortran module, fortran program, fortran subroutine;
    Relation: define;
    Position: overLine;
    Name: "[name]";
  };
};


Decl View "Declaration" {
  StartEntity: java file;

  Option "Name" [Default] = "Shortname" {
    Name: "[name]";
    Title: "File Declaration: [name]";
  };
  Option "Name" = "Fullname" {
    Name: "[fullname]";
    Title: "File Declaration: [fullname]";
  };

  Option "Unresolved";
  Option "Comments";

  Option "Imports" [Default, Reload] {
    Subview OuterUpperRight {
      Title: "Imports:";
      Entity: package,class;
      Relation: import;
      Direction: out;
    }
  };

  Option "Public Members" [Default, Reload] {
    Subview UpperLeft {
      Entity: class public;
      Relation: define;
      Position: overLine;
    }
    Subview UpperRight {
      Entity: interface public;
      Relation: define;
      Position: overLine;
    }
  };

  Option "Default Members" [Default, Reload] {
    Subview LowerLeft {
      Entity: class default;
      Relation: define;
      Position: insideLine;
    }
    Subview LowerRight {
      Entity: interface default;
      Relation: define;
      Position: insideLine;
    }
  };
};


Decl View "Declaration" {
  StartEntity: java method;

  Option "Name" [Default] = "Shortname" {
    Title: "Method Declaration: [shortname]";
    DeclName: method ~constructor = "[name]\n\nreturns:\n   [type]";
    DeclName: method constructor  = "[name]\n";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    Title: "Method Declaration: [fullname]";
    DeclName: method ~constructor = "[fullname]\n\nreturns:\n   [type]";
    DeclName: method constructor = "[fullname]\n";
    Name: "[fullname]";
  };

  Option "Filename";
  Option "Unresolved";
  Option "Comments";

  Option "Called By" [Default, Reload] {
    Subview OuterLeft {
      Title: "Called By:";
      Direction: in;
      Entity:
        ada entry, ada function, ada package, ada procedure, ada protected, ada task,
  c function,
  csharp method,
  fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
  java method,
  jovial file, jovial subroutine,
  pascal compunit, pascal function, pascal procedure,
  vhdl architecture, vhdl function, vhdl process, vhdl procedure;
      Relation:
        ada callby,
  c callby ~inactive, c useby ptr,
  csharp callby, csharp useby ptr,
  fortran callby,
  java callby,
  jovial callby, jovial asm useby,
  pascal callby,
  vhdl callby;
    }
  }

  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      Title: "Calls:";
      Direction: out;
      Entity:
        ada entry, ada function, ada object, ada procedure, ada protected,
  c function, c object,
  csharp method,
  fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
  java method,
  jovial subroutine,
  pascal function, pascal procedure, pascal sql statement,
  vhdl function, vhdl procedure;
      Relation:
        ada call,
  c call ~inactive, c use ptr,
  csharp call, csharp use ptr,
  fortran call,
  java call ~nondynamic,
  jovial call, jovial asm use,
  pascal call,
  vhdl call;
    }
  }

  Subview OuterUpperRight {
    Title: "Parameters:";
    Name: "[type] [name]";
    Filename: "";
    Entity: parameter ~catch;
    Relation: define;
    Shape: none;
    Direction: in;
    Arrows: none;
    DrawNodex: 0;
    DrawNodey: 0;
    DrawSib: 0;
    }
};


Decl View "Declaration" {
  Title: "[kind] Declaration: [name]";
  StartEntity: java class, java interface;

  Option "Name" [Default] = "Shortname" {
    Title: "[kind] Declaration: [name]";
    DeclName: "[kind] [name]";
  };
  Option "Name" = "Fullname" {
    Title: "[kind] Declaration: [fullname]";
    DeclName: "[kind] [fullname]";
  };

  Option "Filename";
  Option "Comments";

  Option "Extends" [Default, Reload] {
    Subview OuterUpperLeft {
      Title: "Extends:";
      Entity: class ~anonymous,interface;
      Relation: extend ~implicit;
      Direction: out;
    }
  }

  Option "Extended By" [Default, Reload] {
    Subview OuterUpperRight {
      Title: "Extended By:";
      Entity: class ~anonymous,interface;
      Relation: extendby ~implicit;
      Direction: out;
    }
  }

  Option "Implements" [Default, Reload] {
    Subview OuterLeft {
      Title: "Implements:";
      Entity: interface;
      Relation: implement;
      Direction: out;
    }
  }

  Option "Implemented By" [Default, Reload] {
    Subview OuterRight {
      Title: "Implemented By:";
      Entity: class;
      Relation: implementby;
      Direction: out;
    }
  }

  Option "Public" [Default, Reload] {
    Subview UpperLeft {
      Name: "[simplename]";
      Entity: public method,public variable;
      Relation: define;
      Position: overLine;
    }
    Subview UpperRight {
      Name: "[simplename]";
      Entity: public ~method ~variable;
      Relation: define;
      Position: overLine;
    }
  }

  Option "Protected" [Default, Reload] {
    Subview MiddleLeft {
      Name: "[simplename]";
      Entity: protected method,protected variable;
      Relation: define;
      Position: onLine;
    }
    Subview MiddleRight {
      Name: "[simplename]";
      Entity: protected ~method ~variable;
      Relation: define;
      Position: onLine;
    }
  }

  Option "Private" [Default, Reload] {
    Subview LowerLeft {
      Name: "[simplename]";
      Entity: method private, method default, variable private, variable default;
      Relation: define;
      Position: insideLine;
    }
    Subview LowerRight {
      Name: "[simplename]";
      Entity:private ~method ~variable, default ~method ~variable;
      Relation: define;
      Position: insideLine;
    }
  }
};


Decl View "Declaration" {
  StartEntity: jovial file, jovial module;

  Option "Name" [Default] = "Shortname" {
    Name: "[name]";
    Title: "File Declaration: [name]";
  };
  Option "Name" = "Fullname" {
    Name: "[fullname]";
    Title: "File Declaration: [fullname]";
  };

  Option "Unresolved";
  Option "Comments";

  Option "Accessed by" [Default,Reload] {
    Subview OuterUpperLeft {
      Title: "Accessed by:";
      Relation: compoolaccessby;
      Direction: in;
      Arrow: solidSingle;
    }
  }

  Option "Accesses" [Default,Reload] {
    Subview OuterUpperRight {
      Title: "Accesses:";
      Relation: compoolaccess;
      Direction: out;
      Arrow: solidSingle;
    }
  }

  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      Title: "Calls:";
      Entity: subroutine;
      Relation: call,asm use;
      Direction: out;
    }
  }

  Subview UpperLeft {
    Entity: module;
    Relation: declare,define;
    Position: overline;
  };

  Subview UpperLeft {
    Entity: module;
    Relation: declare,define;
    Position: overLine;
  };

  Subview MiddleLeft {
    Entity: external subroutine;
    Relation: declare,define;
    Position: overLine;
  };

  Subview UpperRight {
    Entity: external variable;
    Relation: declare,define;
    Position: overLine;
  };

  Subview MiddleRight {
    Entity: external type;
    Relation: declare,define;
    Position: overLine;
  };
};


Decl View "Declaration" {
  StartEntity: jovial subroutine;

  Option "Name" [Default] = "Shortname" {
    Title:"[kind] Declaration: [shortname]";
    DeclName: function  = "[name]\n\nreturns:\n   [type]";
    DeclName: procedure = "[name]\n";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    Title: "[kind] Declaration: [fullname]";
    DeclName: function  = "[fullname]\n\nreturns:\n   [type]";
    DeclName: procedure = "[fullname]\n";
    Name: "[fullname]";
  };

  Option "Filename";
  Option "Unresolved";
  Option "Comments";

  Option "Called By" [Default, Reload] {
    Subview OuterLeft {
      Title: "Called By:";
      Direction: in;
      Entity:
        ada entry, ada function, ada package, ada procedure, ada protected, ada task,
  c function,
  csharp method,
  fortran block data, fortran function, fortran interface, fortran program, fortran subroutine,
  java method,
  jovial file, jovial subroutine,
  pascal compunit, pascal function, pascal procedure,
  vhdl architecture, vhdl function, vhdl process, vhdl procedure;
      Relation:
        ada callby,
  c callby ~inactive, c useby ptr,
  csharp callby, csharp useby ptr,
  fortran callby,
  java callby,
  jovial callby, jovial asm useby,
  pascal callby,
  vhdl callby;
    }
  }

  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      Title: "Calls:";
      Direction: out;
      Entity:
        ada entry, ada function, ada object, ada procedure, ada protected,
  c function, c object,
  csharp method,
  fortran dummy argument, fortran entry, fortran function, fortran interface, fortran subroutine,
  java method,
  jovial subroutine,
  pascal function, pascal procedure, pascal sql statement,
  vhdl function, vhdl procedure;
      Relation:
        ada call,
  c call ~inactive, c use ptr,
  csharp call, csharp use ptr,
  fortran call,
  java call ~nondynamic,
  jovial call, jovial asm use,
  pascal call,
  vhdl call;
    }
  }

  Subview OuterUpperRight {
    Title: "Parameters:";
    Name: "[name] [type]";
    Filename: "";
    Entity: parameter;
    Relation: define;
    Shape: none;
    Direction: in;
    Arrows: none;
    DrawNodex: 0;
    DrawNodey: 0;
    DrawSib: 0;
    }
};


Decl View "Declaration" {
  Title: "[kind] Declaration: [name]";
  StartEntity: pascal class, pascal interface;

  Option "Name" [Default] = "Shortname" {
    Title: "[kind] Declaration: [name]";
    DeclName: "[kind] [name]";
  };
  Option "Name" = "Fullname" {
    Title: "[kind] Declaration: [fullname]";
    DeclName: "[kind] [fullname]";
  };
  Option "Comments";

  Option "Extends" [Default, Reload] {
    Subview OuterUpperLeft {
      Title: "Extends:";
      Entity: class,interface;
      Relation: derivefrom;
      Direction: out;
    }
  }

  Option "Extended By" [Default, Reload] {
    Subview OuterUpperRight {
      Title: "Extended By:";
      Entity: class,interface;
      Relation: derive;
      Direction: out;
    }
  }

  Option "Implements" [Default, Reload] {
    Subview OuterLeft {
      Title: "Implements:";
      Entity: interface;
      Relation: implement;
      Direction: out;
    }
  }

  Option "Implemented By" [Default, Reload] {
    Subview OuterRight {
      Title: "Implemented By:";
      Entity: class;
      Relation: implementby;
      Direction: out;
    }
  }

  Option "Public" [Default, Reload] {
    Subview UpperLeft {
      Name: "[simplename]";
      Entity: public method,published method;
      Relation: define,declare;
      Position: overLine;
    }
    Subview UpperRight {
      Name: "[simplename]";
      Entity: public ~method,published ~method;
      Relation: define,declare;
      Position: overLine;
    }
  }

  Option "Protected" [Default, Reload] {
    Subview MiddleLeft {
      Name: "[simplename]";
      Entity: protected method;
      Relation: define,declare;
      Position: onLine;
    }
    Subview MiddleRight {
      Name: "[simplename]";
      Entity: protected ~method;
      Relation: define,declare;
      Position: onLine;
    }
  }

  Option "Private" [Default, Reload] {
    Subview LowerLeft {
      Name: "[simplename]";
      Entity: private method;
      Relation: define,declare;
      Position: insideLine;
    }
    Subview LowerRight {
      Name: "[simplename]";
      Entity: private ~method;
      Relation: define,declare;
      Position: insideLine;
    }
  }
};


Decl View "Declaration" {
  Title: "[kind] Declaration: [name]";
  DeclName: "[kind] [name]\n\n";
  StartEntity: pascal compunit;

  Option "Constants";
  Option "Globals";
  Option "Comments";

  Option "Inherited by" [Default, Reload] {
    Subview OuterUpperLeft {
      Title: "Inherited by:";
      Entity: pascal compunit;
      Relation: pascal inheritby;
      Direction: out;
    };
  };

  Option "Inherits" [Default, Reload] {
    Subview OuterUpperRight {
      Title: "Inherits:";
      Entity: pascal compunit;
      Relation: pascal inherit;
      Direction: out;
    };
  };

  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      LocalsExcludeEntity: x;
      GlobalsExcludeEntity: x;
      Title: "Calls:";
      Entity: function, procedure, sql statement;
      Relation: call;
      Direction: out;
    };
  };

  Option "Locals";
  Option "Name";
  Option "Routines";
  Option "Types";
  Option "Variables";
  Option "Unresolved";

  Subview OuterUpperCenter {
    Title: "Parameters:";
    Name: "[name] : [type]";
    Entity: pascal parameter;
    Relation: define,declare;
    Shape: none;
    Direction: in;
    Arrows: none;
    DrawNodex: 0;
    DrawNodey: 2;
    DrawSib: 0;
    PsNodex: 0;
    PsNodey: 2;
    PsSib: 0;
  };

  Subview UpperLeft {
    Entity: function,procedure;
    Relation: define,declare;
    Position: global = overLine;
    Position: insideLine;
  };

  Subview UpperRight {
    Entity: const,type ~unnamed,variable;
    Relation: define,declare;
    Position: global = overLine;
    Position: insideLine;
  };
};


Decl View "Declaration" {
  Title: "File Declaration: [name]";
  DeclName: "[kind]\n   [name]";
  StartEntity: pascal file ~unresolved;

  Option "Comments";

  Subview OuterLeft {
    Title: "Included By:";
    Entity: pascal file;
    Relation: pascal includeby;
    Name: "[name]";
    Direction: in;
  };

  Subview UpperLeft {
    Entity: pascal function,pascal procedure,pascal compunit;
    Relation: define;
    Position: overLine;
    Name: "[name]";
  };
};


Decl View "Declaration" {
  Title: "Table Declaration: [name]";
  DeclName: "[name]";
  StartEntity: pascal sql table;

  Option "Comments";
  Subview UpperLeft {
    Entity: sql column;
    Relation: define;
    Position: overLine;
    Name: "[name]";
  };
};


Decl View "Declaration" {
  Title: "[kind] Declaration: [name]";
  StartEntity: pascal function,pascal procedure;
  DeclName: function ~constructor ~destructor = "[kind] [name]\n\nreturns:\n   [type]";
  DeclName: constructor,destructor = "[kind] [name]\n\n";
  DeclName: procedure = "[kind] [name]\n\n";

  Option "Called By" [Default, Reload] {
    Subview OuterLeft {
      Title: "Called By:";
      Entity: pascal function,pascal procedure,pascal compunit;
      Relation: callby;
      Direction: in;
    };
  };

  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      Title: "Calls:";
      Entity: function, procedure, sql statement;
      Relation: call;
      Direction: out;
    };
  };

  Option "Name";
  Option "Unresolved";
  Option "Comments";

  Subview OuterUpperRight {
    Title: "Parameters:";
    Name: "[name] : [type]";
    Entity: pascal parameter;
    Relation: define;
    Shape: none;
    Direction: in;
    Arrows: none;
    DrawNodex: 0;
    DrawNodey: 2;
    DrawSib: 0;
    PsNodex: 0;
    PsNodey: 2;
    PsSib: 0;
  };
};


Decl View "Declaration" {
  Entity: plm file;

  Option "Name" [Default] = "Shortname" {
    Name: "[name]";
    Title:  "File Declaration: [name]";
  };
  Option "Name" = "Fullname" {
    Name:       "[fullname]";
    Title:  "File Declaration: [fullname]";
  };

  Option "Unresolved";
  Option "Comments";

  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      Title:    "Calls:";
      Entity:   procedure;
      Relation:   call;
      Direction:  out;
    }
  }

  Subview MiddleLeft {
    Entity: procedure;
    Relation: declare;
    Position: overLine;
  }

  Subview UpperRight {
    Entity: variable;
    Relation: declare;
    Position: overLine;
  }
};


Decl View "Declaration" {
  Entity: plm procedure;

  Option "Name" [Default] = "Shortname" {
    Title:        "[kind] Declaration: [shortname]";
    DeclName: function  = "[name]\n\nreturns:\n   [type]";
    DeclName: procedure = "[name]\n";
    Name:       "[name]";
  };
  Option "Name" = "Fullname" {
    Title:        "[kind] Declaration: [fullname]";
    DeclName: function  = "[fullname]\n\nreturns:\n   [type]";
    DeclName: procedure = "[fullname]\n";
    Name:                   "[fullname]";
  };

  Option "Filename";
  Option "Unresolved";
  Option "Comments";

  Option "Called By" [Default, Reload] {
    Subview OuterLeft {
      Title:    "Called By:";
      Entity:   procedure;
      Relation:   callby;
      Direction:  in;
    }
  }

  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      Title:    "Calls:";
      Entity:   procedure;
      Relation:   call;
      Direction:  out;
    }
  }

  Subview OuterUpperRight {
    Title:  "Parameters:";
    Name: "[name] [type]";
    Filename:   "";
    Entity: parameter;
    Relation: declare;
    Shape:  none;
    Direction:  in;
    Arrows: none;
    DrawNodex:  0;
    DrawNodey:  0;
    DrawSib:  0;
    }
};


Decl View "Declaration" {
  Title: "File Definition: [name]";
  StartEntity: python file;
  Main: false;

  Option "Name" [Default] = "Shortname" {
    DeclName: "[kind]\n   [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    DeclName: "[kind]\n   [fullname]";
    Name: "[fullname]";
  };

  Option "Unresolved";
  Option "Comments";

  Option "Used By Files" [Default, Reload] {
    Subview OuterUpperLeft {
      Title: "Used By Files:";
      Entity: python file;
      Relation: Importby;
      Direction: in;
    }
  }
  Option "Uses Files" [Default, Reload] {
    Subview OuterUpperRight {
      Title: "Uses Files:";
      Entity: python file;
      Relation: Import;
      Direction: out;
    }
  }

  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      Title:    "Calls:";
      Entity:   class, function, property, variable;
      Relation:   call;
      Direction:  out;
    }
  }

  Subview MiddleLeft {
    Entity: function;
    Relation: define;
    Position: overLine;
  }
  Subview MiddleRight {
    Entity: class, variable;
    Relation: define;
    Position: overLine;
  }
};


Decl View "Declaration" {
  Entity: python function;

  Option "Name" [Default] = "Shortname" {
    Title:        "[kind] Declaration: [shortname]";
    DeclName: function = "[name]\n";
    Name:       "[name]";
  };
  Option "Name" = "Fullname" {
    Title:        "[kind] Declaration: [fullname]";
    DeclName: function  = "[fullname]\n\nreturns:\n   [type]";
    Name:                   "[fullname]";
  };

  Option "Filename";
  Option "Unresolved";
  Option "Comments";

  Option "Called By" [Default, Reload] {
    Subview OuterLeft {
      Title:    "Called By:";
      Entity:   class, function, file;
      Relation:   callby;
      Direction:  in;
    }
  }

  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      Title:    "Calls:";
      Entity:   class, function, property, variable;
      Relation:   call,setto;
      Direction:  out;
    }
  }

  Subview OuterUpperRight {
    Title:  "Parameters:";
    Name: "[name]";
    Filename:   "";
    Entity: parameter;
    Relation: define;
    Shape:  none;
    Direction:  in;
    Arrows: none;
    DrawNodex:  0;
    DrawNodey:  0;
    DrawSib:  0;
    }
};


Decl View "Declaration" {
  Title: "[kind] Declaration: [name]";
  StartEntity: python class;

  Option "Name" [Default] = "Shortname" {
    Title: "[kind] Declaration: [name]";
    DeclName: "[kind] [name]";
  };
  Option "Name" = "Fullname" {
    Title: "[kind] Declaration: [fullname]";
    DeclName: "[kind] [fullname]";
  };

  Option "Comments";

  Option "Extends" [Default, Reload] {
    Subview OuterUpperLeft {
      Title: "Inherits:";
      Entity: class;
      Relation: inherit;
      Direction: out;
    }
  }

  Option "Extended By" [Default, Reload] {
    Subview OuterUpperRight {
      Title: "Inherited by:";
      Entity: class;
      Relation: inheritby;
      Direction: out;
    }
  }

  Option "Public" [Default, Reload] {
    Subview UpperLeft {
      Name: "[simplename]";
      Entity: function;
      Relation: define;
      Position: overLine;
    }
    Subview UpperRight {
      Name: "[simplename]";
      Entity: public variable;
      Relation: define;
      Position: overLine;
    }
  }
};


Decl View "Declaration" {
  Title: "File Definition: [name]";
  StartEntity: web file;
  Main: false;

  Option "Name" [Default] = "Shortname" {
    DeclName: "[kind]\n   [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    DeclName: "[kind]\n   [fullname]";
    Name: "[fullname]";
  };

  Option "Unresolved";
  Option "Comments";

  Option "Used By Files" [Default, Reload] {
    Subview OuterUpperLeft {
      Title: "Used By Files:";
      Entity: web file;
      Relation: Importby, Linkby, Srcby, Useby;
      Direction: in;
    }
  }
  Option "Uses Files" [Default, Reload] {
    Subview OuterUpperRight {
      Title: "Uses Files:";
      Entity: web file;
      Relation: Import, Link, Src, Use;
      Direction: out;
    }
  }

  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      Title:    "Calls:";
      Entity:   function, property, variable;
      Relation:   call,setto;
      Direction:  out;
    }
  }

  Subview MiddleLeft {
    Entity: function;
    Relation: define;
    Position: overLine;
  }
  Subview MiddleRight {
    Entity: class, constant, variable;
    Relation: define;
    Position: overLine;
  }
};



Decl View "Declaration" {
  Entity: web function ~class,javascript property;

  Option "Name" [Default] = "Shortname" {
    Title:        "[kind] Declaration: [shortname]";
    DeclName: function = "[name]\n";
    Name:       "[name]";
  };
  Option "Name" = "Fullname" {
    Title:        "[kind] Declaration: [fullname]";
    DeclName: function  = "[fullname]\n\nreturns:\n   [type]";
    DeclName: procedure = "[fullname]\n";
    Name:                   "[fullname]";
  };

  Option "Filename";
  Option "Unresolved";
  Option "Comments";

  Option "Called By" [Default, Reload] {
    Subview OuterLeft {
      Title:    "Called By:";
      Entity:   function, file;
      Relation:   callby,settoby;
      Direction:  in;
    }
  }

  Option "Calls" [Default, Reload] {
    Subview OuterRight {
      Title:    "Calls:";
      Entity:   function, property, variable;
      Relation:   call,setto;
      Direction:  out;
    }
  }

  Subview OuterUpperRight {
    Title:  "Parameters:";
    Name: "[name] [type]";
    Filename:   "";
    Entity: parameter;
    Relation: define;
    Shape:  none;
    Direction:  in;
    Arrows: none;
    DrawNodex:  0;
    DrawNodey:  0;
    DrawSib:  0;
    }
};


Decl View "Declaration" {
  Title: "Class Definition: [name]";
  StartEntity: web php class ~unresolved, web php interface, web javascript class;
  Main: false;

  Option "Name" [Default] = "Shortname" {
    DeclName: "[kind]: [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname" {
    DeclName: "[kind]: [fullname]";
    Name: "[fullname]";
  };

  Option "Filename";
  Option "Comments";
  Option "Base Classes" [Default, Reload] {
    Subview OuterUpperLeft {
      Title: "Base Classes:";
      Entity: class, interface;
      Relation: extend;
      Direction: out;
    }
  }

  Option "Derived Classes" [Default, Reload] {
    Subview OuterUpperRight {
      Title: "Derived Classes:";
      Entity: class, interface;
      Relation: extendby;
      Direction: out;
    }
  }

  Option "Implements" [Default, Reload] {
    Subview OuterLeft {
      Title: "Implements:";
      Entity: php interface;
      Relation: implement;
      Direction: out;
    }
  }

  Option "Implemented By" [Default, Reload] {
    Subview OuterRight {
      Title: "Implemented By:";
      Entity: class;
      Relation: implementby;
      Direction: out;
    }
  }

  Option "Private" [Default, Reload] {
    Subview UpperLeft {
      Title: "Private:";
      Name: "[name]";
      Entity: private method;
      Relation: define;
      Position: insideLine;
    }
    Subview UpperRight {
      Title: "Private:";
      Name: "[type] [name]";
      Entity: private property;
      Relation: define;
      Position: insideLine;
    }
  }

  Option "Protected" [Default, Reload] {
    Subview MiddleLeft {
      Title: "Protected:";
      Name: "[name]";
      Entity: protected method;
      Relation: define;
      Position: onLine;
    }
    Subview MiddleRight {
      Title: "Protected:";
      Name: "[type] [name]";
      Entity: protected property;
      Relation: define;
      Position: onLine;
    }
  }

  Option "Public" [Default, Reload] {
    Subview LowerLeft {
      Title: "Public:";
      Name: "[name]";
      Entity: public method;
      Relation: define;
      Position: overLine;
    }
    Subview LowerRight {
      Title: "Public:";
      Name: "[type] [name]";
      Entity: public property, constant;
      Relation: define;
      Position: overLine;
    }
  }
};



#
# Declaration File
#

Alias View "Declaration File" {
  StartEntity: c function, c type, c global object, c macro, csharp method, csharp type,
         fortran common, fortran program, fortran function, fortran subroutine,
         java class, java method, java interface,
         jovial subroutine, jovial external,
         pascal function, pascal procedure,
         python class, python function,
         plm procedure, web function;
  Relation: definein;
  Entity: file ~unresolved;
  AliasView: "Declaration";
};



#
# Declaration Tree
#

Tree View "Declaration Tree" {
  Title: "Declaration Tree: [name]";
  Orientation: TopToBottom;
  StartEntity: ada task, ada protected, ada package, ada function, ada procedure, ada file;
  Entity: task,protected,package,function,procedure,entry;
  Relation: declare;

  Option "Layout";
  Option "Level";
  Option "Operators";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter;
      Relation: declare;
      Name: "[name] : [type]";
    };
  };

  Option "Renames" = "Off" { ExcludeSecondRelation: "ada rename"; };
  Option "Renames" [Default] = "On";
  Option "Renames" [Reload];

  Option "Sort";
};


Tree View "Declaration Tree" {
  Title: "Declaration Tree: [name]";
  Orientation: TopToBottom;
  StartEntity: vhdl architecture,vhdl configuration,vhdl entity,vhdl function,vhdl file,vhdl package,vhdl procedure;
  Entity: architecture,configuration,entity,function,package,procedure;
  Relation: declare;

  Option "Layout";
  Option "Level";
  Option "Sort";
  Option "Comments";
};



#
# Declaration Type
#

Alias View "Declaration Type" {
  StartEntity: c type ~unresolved, csharp type ~unresolved,
         java variable,
         jovial variable;
  Relation: typed;
  Entity: type ~unresolved,enum;
  AliasView: "Declaration";
};



#
# Declared In
#

Tree View "Declared In" {
  Title: "Declared In: [name]";
  Orientation: BottomToTop;
  StartEntity: ada task, ada protected, ada package, ada function, ada procedure, ada type;
  Entity: task,protected,package,function,procedure,entry,file;
  Relation: declarein ~file;

  Option "Layout";
  Option "Level";
  Option "Comments";

  Option "Parameters" [Reload] = "On" {
    Subview {
      Entity: parameter;
      Relation: declare;
      Name: "[name] : [type]";
    };
  };
  Option "Sort";
};



#
# Derived Classes
#

Tree View "Derived Classes" {
  Title: "Derived Classes: [name]";
  Orientation: TopToBottom;
  ArrowDir: up;
  StartEntity: c class, c struct, c union;
  Entity: class,struct,union;
  Relation: derive;

  Option "Name" = "Shortname" { Name: "[name]"; };
  Option "Name" [Default] = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout" [Default] = "Crossing";
  Option "Level";
  Option "Sort";
};


Tree View "Derived Classes" {
  Title: "Derived Classes: [name]";
  Orientation: TopToBottom;
  ArrowDir: up;
  StartEntity: csharp class, csharp struct;
  Entity: class,struct;
  Relation: derive;

  Option "Name" = "Shortname" { Name: "[name]"; };
  Option "Name" [Default] = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout" [Default] = "Crossing";
  Option "Level";
  Option "Sort";
};



Tree View "Derived Classes" {
  Title: "Derived Classes: [name]";
  Orientation: TopToBottom;
  ArrowDir: up;
  StartEntity: web php class, web php interface, web javascript class;
  Entity: web php class, web php interface, web javascript class;
  Relation: extendby;

  Option "Name" = "Shortname" { Name: "[name]"; };
  Option "Name" [Default] = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout" [Default] = "Crossing";
  Option "Level";
  Option "Sort";
};




#
# Extended By
#

Tree View "Extended By" {
  Title: "Extended By: [name]";
  Orientation: TopToBottom;
  StartEntity: java class ~anonymous, java interface;
  Relation: extendby ~implicit;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name" = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout";
  Option "Level";
  Option "Sort";
};


Tree View "Extended By" {
  Title: "Extended By: [name]";
  Orientation: TopToBottom;
  StartEntity: pascal class, pascal interface;
  Entity: class,interface;
  Relation: derive;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name" = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Sort";
};

Tree View "Extended By" {
  Title: "Extended By: [name]";
  Orientation: TopToBottom;
  StartEntity: python class;
  Entity: class;
  Relation: inheritby;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name" = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Sort";
};


Tree View "Extended By" {
  Title: "Extended By: [name]";
  Orientation: TopToBottom;
  StartEntity: fortran derived type;
  Entity: derived type;
  Relation: extendby;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name" = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Sort";
};



#
# Extends
#

Tree View "Extends" {
  Title: "Extends: [name]";
  Orientation: BottomToTop;
  ArrowDir: up;
  StartEntity: java class ~anonymous, java interface;
  Relation: extend ~implicit;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name" = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout";
  Option "Level";
  Option "Sort";
};


Tree View "Extends" {
  Title: "Extends: [name]";
  Orientation: BottomToTop;
  ArrowDir: up;
  StartEntity: pascal class, pascal interface;
  Entity: class,interface;
  Relation: derivefrom;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name" = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Sort";
};

Tree View "Extends" {
  Title: "Extends: [name]";
  Orientation: BottomToTop;
  ArrowDir: up;
  StartEntity: python class;
  Entity: class;
  Relation: inherit;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name" = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Sort";
};

Tree View "Extends" {
  Title: "Extends: [name]";
  Orientation: BottomToTop;
  ArrowDir: up;
  StartEntity: fortran derived type;
  Entity: derived type;
  Relation: extend;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name" = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Sort";
};

#
# Include view
#

Tree View "Include" {
  Title: "Includes: [name]";
  Orientation: TopToBottom;
  StartEntity: c file,
         fortran block data, fortran program, fortran function, fortran subroutine,
         pascal file;
  Entity: file;
  Relation: include ~inactive;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Sort";
  Option "Unresolved";
};



#
# Includeby view
#

Tree View "Includeby" {
  Title: "Included By: [name]";
  Orientation: BottomToTop;
  StartEntity: c header file, c unknown file, fortran file, pascal file;
  Entity: file, block data, program, function, subroutine;
  Relation: includeby ~inactive;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Sort";
};



#
# Instantiations
#

Tree View "Instantiations" {
  Title: "Instantiations: [name]";
  Orientation: TopToBottom;
  StartEntity: ada generic, ada unknown;
  Entity: package,function,procedure,task;
  Relation: instance ~declare ~declarein ~copy;
  Option "Sort";
};



#
# Instantiated From view
#

Tree View "Instantiated From" {
  Title: "Instantiated From: [name]";
  Orientation: BottomToTop;
  StartEntity: ada package, ada function, ada procedure, ada task;
  Entity: generic,unknown;
  Relation: instanceof ~copy;
  Option "Sort";
};



#
# Parent Declaration
#

Alias View "Parent Declaration" {
  StartEntity: ada function, ada procedure, ada package, ada task, ada entry,
         ada component, ada enumeration literal, ada constant,
         ada exception, ada object, ada type;
  Relation: declarein;
  Entity: function,procedure,package,task,type,entry,protected;
  AliasView: "Declaration";
};

Alias View "Parent Declaration" {
  StartEntity: web function,web property,web parameter,web constant,
          web variable,web class,web interface;
  Relation: definein;
  Entity: file,class,interface,function;
  AliasView: "Declaration";
};

Alias View "Parent Declaration" {
  StartEntity: parameter, object, subroutine, type, variable;
  Relation: definein;
  Entity: compool, file, function, method, procedure, subroutine, type;
  AliasView: "Declaration";
};


Alias View "Parent Declaration" {
  StartEntity: c member, c enumerator;
  Relation: declarein;
  Entity: type ~unresolved;
  AliasView: "Declaration";
};


Alias View "Parent Declaration" {
  StartEntity: vhdl configuration,vhdl entity,vhdl function,vhdl package,vhdl procedure;
  Relation: declarein;
  Entity: architecture,configuration,entity,file,function,package,procedure;
  AliasView: "Declaration Tree";
};


#
# Parent Lib Unit view
#

Tree View "Parent Lib Unit" {
  Title: "Parent Lib Unit: [name]";
  Orientation: BottomToTop;
  StartEntity: ada package, ada instantiated package, ada function, ada procedure;
  Entity: package,function,procedure;
  Relation: parent libunit;

  Option "Layout";
  Option "Level";
  Option "Sort";
};


#
# Perform
#

Tree View "Perform" {
  Title: "Perform: [name]";
  Orientation: TopToBottom;
  StartEntity: cobol paragraph, cobol section;
  StartRelation: cobol perform, cobol goto;
  Entity: cobol paragraph, cobol section;
  Relation: cobol perform, cobol goto;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Operators";
  Option "Sort";
  Option "Unresolved";
};


#
# Perform By
#

Tree View "Perform By" {
  Title: "Perform By: [name]";
  Orientation: BottomToTop;
  StartEntity: cobol paragraph, cobol section;
  Entity: cobol paragraph, cobol section;
  Relation: cobol performby, cobol gotoby;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Operators";
  Option "Sort";
  Option "Unresolved";
};


#
# Rename Declaration
#

Alias View "Rename Declaration" {
  Entity: ada function, ada procedure, ada package, ada task, ada entry,
    ada component, ada enumeration literal, ada constant,
    ada exception, ada object, ada type;
  Relation: rename;
  AliasView: "Declaration";
};



#
# Required by
#

Tree View "Required By" {
  Title: "Required By: [name]";
  Orientation: BottomToTop;
  StartEntity: web file,web predefined module;
  Entity: web file,web predefined module;
  Relation: web requireby;

  Option "Name" [Default] = "Shortname" {
    Title: "Callby: [name]";
    Name: "[name]";
  };
  Option "Name" = "Fullname"  {
    Title: "Callby: [fullname]";
    Name: "[fullname]";
  };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout";
  Option "Level";
  Option "Sort";
  Option "Unresolved";
};



#
# Requires
#

Tree View "Requires" {
  Title: "Requires: [name]";
  Orientation: TopToBottom;
  StartEntity: web file,web predefined module;
  StartRelation: web require,web predefined module;
  Entity: web file;
  Relation: web require;

  Option "Name" [Default] = "Shortname" { Name: "[name]"; };
  Option "Name"           = "Fullname"  { Name: "[fullname]"; };

  Option "Duplicate Subtrees";
  Option "Filename";
  Option "Layout";
  Option "Level";
  Option "Sort";
  Option "Unresolved";
};



#
# Return Type
#

Alias View "Return Type" {
  StartEntity: c function, csharp method, java method, jovial function;
  Relation: typed;
  Entity: type ~unresolved;
  AliasView: "Declaration";
};



#
# Type Derived From view
#

Tree View "Type Derived From" {
  Title: "Type Derived From: [name]";
  Orientation: BottomToTop;
  StartEntity: ada type;
  Entity: type;
  Relation: derivefrom;

  Option "Layout";
  Option "Level";
  Option "Members" [Reload] = "Components" {
    Subview {
      Entity: component;
      Relation: declare;
      Name: " [name]: [type]";
    };
  };
  Option "Members" [Reload] = "Operations" {
    Subview {
      Entity: function,procedure;
      Relation: operation ~classwide;
      Name: " [name]()";
    };
  };
  Option "Members" [Reload] = "Components & Operations" {
    Subview {
      Entity: function,procedure,component;
      Relation: operation ~classwide,declare;
      Name: component = " [name]: [type]";
      Name: function  = " [name]()";
      Name: procedure = " [name]()";
    };
  };
  Option "Sort";
};



#
# Type Tree
#

Tree View "Type Tree" {
  Title: "Type Tree: [name]";
  Orientation: TopToBottom;
  StartEntity: ada type;
  Entity: type;
  Relation: derive;

  Option "Layout";
  Option "Level";
  Option "Members" [Reload] = "Components" {
    Subview {
      Entity: component;
      Relation: declare;
      Name: " [name]: [type]";
    };
  };
  Option "Members" [Reload] = "Operations" {
    Subview {
      Entity: function,procedure;
      Relation: operation ~classwide;
      Name: " [name]()";
    };
  };
  Option "Members" [Reload] = "Components & Operations" {
    Subview {
      Entity: function,procedure,component;
      Relation: operation ~classwide,declare;
      Name: component = " [name]: [type]";
      Name: function  = " [name]()";
      Name: procedure = " [name]()";
    };
  };
  Option "Sort";
};



#
# Used By
#

Tree View "Used By" {
  Title: "Used By: [name]";
  Orientation: BottomToTop;
  StartEntity: fortran module;
  Entity: module, block data, program, function, subroutine;
  Relation: moduleuseby;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Name";
  Option "Sort";
};



#
# Uses view
#

Tree View "Uses" {
  Title: "Uses: [name]";
  Orientation: TopToBottom;
  StartEntity: fortran module, fortran block data, fortran program, fortran function, fortran subroutine;
  Entity: module;
  Relation: moduleuse;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Name";
  Option "Sort";
  Option "Uses";
};


Tree View "Uses" {
  Title: "Uses: [name]";
  Orientation: TopToBottom;
  StartEntity: vhdl architecture,vhdl configuration,vhdl entity,vhdl package;
  Entity: architecture,configuration,entity,package;
  Relation: use name;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Name";
  Option "Sort";
};


#
# With
#

Tree View "With" {
  Title: "Withs: [name]";
  Orientation: TopToBottom;
  StartEntity: ada package, ada function, ada procedure, ada task, ada protected;
  Entity: package,function,procedure,unknown;
  Relation: with;
  SkipRelation: declare;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Sort";
};



#
# Withby
#

Tree View "Withby" {
  Title: "Withbys: [name]";
  Orientation: BottomToTop;
  StartEntity: ada package, ada function, ada procedure;
  Entity: package,function,procedure,task,protected;
  Relation: withby;

  Option "Duplicate Subtrees";
  Option "Layout";
  Option "Level";
  Option "Sort";
};



####################
# DEPENDENCY GRAPH #
####################

Depends View "Depends On" {
  Title: "Dependency Graph: [name]";
  Orientation: LefToRight;
  DependsOrientation: Forward;
  StartEntity: file, class, fortran module, package;

#  StartEntity: class, struct, union, procedure, package, component,
#               file, method, subroutine, parameter, object, variable;

  Option "Layout" [Default] = "Horizontal Non-Crossing";
  Option "Level" [Default] = "1 Level";
};

#############################
# DEPENDENCY-REVERSE GRAPH  #
#############################

Depends View "Depended On By" {
  Title: "Reverse-Dependency Graph: [name]";
  Orientation: RightToLeft;
  DependsOrientation: Reverse;
  StartEntity: file, class, fortran module, package;

#  StartEntity: class, struct, union, procedure, package, component,
#               file, method, subroutine, parameter, object, variable;

#  StartEntity: class, struct, union, procedure, package, component,
#              record type, array type, member ~function ~type, field, variable,
#        file ~unresolved, task, protected, entry, configuration,
#        entity, type ~unresolved, enum, task, file, interface, block data, program,
#        subroutine, generic, compool, method, subroutine, parameter, object, variable;

  Option "Layout" [Default] = "Horizontal Non-Crossing";
  Option "Level" [Default] = "1 Level";
};
